不要求求具体的步骤，只需要结果，可以考虑dp
坐标类的只需要开n个空间
前i个这种需要开n + 1个空间
全部需要再看看
******************************************
1.矩阵dp（坐标）
二维
一维
2.分割dp
*如果限制了切割子字符串的个数，需要二维
dp[i][j] 前i个字符，切成j个单词，是否可行
*如果没有限制
dp[i]
3.区间dp
i - j 二维
4.两个序列的dp
二维

多写几遍这道题目
特别是预处理的那一段，可以背下来
这道题是切割dp
108. Palindrome Partitioning II
public class Solution {
    /**
     * @param s: A string
     * @return: An integer
     */
    public int minCut(String s) {
        // write your code here
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        int n = s.length();
        int[] dp = new int[n + 1];// first i string need how many cuts can be palindrome
        
        
        boolean[][] getPalindrome = isPalindrome(s);
        //initilize 
        for (int i = 0; i <= n; i++) {// Notice dp[0] should be -1, not 0.
            dp[i] = i - 1;
        }
        
        //function 
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                if (getPalindrome[j][i - 1]) {
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        }
        
        return dp[n];
    }
    
    //Pre-process need to be recite
    private boolean[][] isPalindrome(String s) {
        
        int n = s.length();
        boolean[][] getPalindrome = new boolean[n][n];
        
        for (int i = 0; i < n; i++) {
            getPalindrome[i][i] = true;
        }
        
        for (int i = 0; i < s.length() - 1; i++) {
            getPalindrome[i][i + 1] = (s.charAt(i) == s.charAt(i + 1)); // in case only two char in the string
        }
        
        for (int i = 2; i < n; i++) {//区间型动态规划，背下来。外层长度，内层起点
            for (int start = 0; start + i < n; start++) {
                getPalindrome[start][start + i]
                    = getPalindrome[start + 1][start + i - 1] && s.charAt(start) == s.charAt(start + i);
            }
        }
        
        return getPalindrome;
    }
}

107. Word Break
if you choose forward thought, TLE
public class Solution {
    /*
     * @param s: A string
     * @param dict: A dictionary of words dict
     * @return: A boolean
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here
        //edge case 
        if (s == null && !dict.isEmpty()) {
            return false;
        }
        
        if (s.length() == 0 && dict.isEmpty()) {
            return true;
        }
        
        //int maxLength = getMaxLength(dict);
        int n = s.length();
        //state, first i char can be perfect cut 
        boolean[] dp = new boolean[n + 1];
        
        //initilize 
        dp[0] = true;
        
        //function 
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                String str = s.substring(j, i);
                if (dp[j] && dict.contains(str)) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}

//we need choose backward thought
public class Solution {
    /*
     * @param s: A string
     * @param dict: A dictionary of words dict
     * @return: A boolean
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here
        //edge case 
        if (s == null && !dict.isEmpty()) {
            return false;
        }
        
        if (s.length() == 0 && dict.isEmpty()) {
            return true;
        }
        
         int maxLength = getMaxLength(dict);
        int n = s.length();
        //state, first i char can be perfect cut 
        boolean[] dp = new boolean[n + 1];
        
        //initilize 
        dp[0] = true;
        
        //function 
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= i && j <= maxLength; j++) {// loop must be terminated, if continue with doing nothing, still consume time
                String str = s.substring(i - j,i);
                if (dp[i - j] && dict.contains(str)) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
    
    private int getMaxLength(Set<String> dict){
        int max = 0;
        for(String s : dict){
            max = Math.max(max,s.length());
        }
        return max;
    }
}

77. Longest Common Subsequence
public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: The length of longest common subsequence of A and B
     */
    public int longestCommonSubsequence(String A, String B) {
        // write your code here
        if (A.length() == 0 || B.length() == 0) {
            return 0;
        }
        
        int m = A.length();
        int n = B.length();
        
        //state 
        int[][] dp = new int[m + 1][n + 1];
        
        //initilize 
        dp[0][0] = 0;
        
        //function 
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[m][n];
    }
}


79. Longest Common Substring
public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: the length of the longest common substring.
     */
    public int longestCommonSubstring(String A, String B) {
        // write your code here
        int res = 0;
        if (A == null || B == null) {
            return res;
        }
        
        int m = A.length();
        int n = B.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        dp[0][0] = 0;
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                res = Math.max(res, dp[i][j]);
            }
        }
        return res;
    }
}

119. Edit Distance
public class Solution {
    /**
     * @param word1: A string
     * @param word2: A string
     * @return: The minimum number of steps.
     */
    public int minDistance(String word1, String word2) {
        // write your code here
        if (word1 == null || word2 == null) {
            return 0;
        }
        
        int m = word1.length();
        int n = word2.length();
        
        //state 
        int[][] dp = new int[m + 1][n + 1];
        
        //initilize 
        for (int i = 0; i < n + 1; i++) {
            dp[0][i] = i;
        }
        
        for (int i = 0; i < m + 1; i++) {
            dp[i][0] = i;
        }
        
        //function 
        for (int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));
                }
            }
        }
        
        return dp[m][n];
    }
}

118. Distinct Subsequences
public class Solution {
    /*
     * @param : A string
     * @param : A string
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String S, String T) {
        // write your code here
        if (T.length() > S.length()) {
            return 0;
        }
        
        int n = S.length();
        int m = T.length();
        
        //state: 从S的前i个取子字符串为T的前j个字符串的个数
        int[][] dp = new int[n + 1][m + 1];
        
        //initialize
        //从s中取出空串的方案
        dp[0][0] = 1;
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        
        //function
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                //第i个和第j个相等，如果取当前的i，则要求dp[i - 1][j - 1]
                //如果不要当前的i，则子字符串j与前i - 1有关
                if (S.charAt(i - 1) == T.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        
        return dp[n][m];
        
    }
}
