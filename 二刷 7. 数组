三段翻转法，一定要记着
39. Recover Rotated Sorted Array
public class Solution {
    /**
     * @param nums: An integer array
     * @return: nothing
     */
    public void recoverRotatedSortedArray(List<Integer> nums) {
        // write your code here
        if (nums.size() == 0) {
            return;
        }
        int cut = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums.get(i) < nums.get(i - 1)) {
                cut = i - 1;
                reverse(0, cut, nums);
                reverse(cut + 1, nums.size() - 1, nums);
                reverse(0, nums.size() - 1, nums);
                return;
            }
        }
    }
    public void reverse(int start, int end, List<Integer> nums){
        for (int i = start, j = end; i < j; i++, j--) {
            Integer temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j,temp);
        }
    }
}

*************************
如果想往for循环里面添加多个判断条件，需要用&&和||连接
8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if (str == null || str.length == 0) {
            return;
        }
        
       
        int length = str.length;
        offset = offset % length;
        
        reverse(str, 0, length - offset - 1);
        reverse(str, length - offset, length - 1);
        reverse(str, 0, length - 1);
    }
    public void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++,j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}
********************
这道题可以多写几遍
关于stringbuilder
53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return "";
        }
        String [] array = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for(int i = array.length - 1; i >= 0; i--){
            if(!array[i].equals("")){
                sb.append(array[i]);
                sb.append(" ");
            }
        }
        //sb maybe empty if s only have space.
        //when new string show up, we should consider the extreme situation
        return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
    }
}

****************************************
while循环比for循环好点
64. Merge Sorted Array
public class Solution {
    /*
     * @param A: sorted integer array A which has m elements, but size of A is m+n
     * @param m: An integer
     * @param B: sorted integer array B which has n elements
     * @param n: An integer
     * @return: nothing
     */
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        // write your code here
        if (m == 0 && n == 0) {
            return;
        }
        
        int index = m + n - 1;
        int i = m - 1;
        int j = n - 1;
        
        while (i >= 0 && j >= 0) {
            if (A[i] > B[j]) {
                A[index--] = A[i--];
            } else {
                A[index--] = B[j--];
            }
        }
        
        while(i >= 0){
            A[index--] = A[i--];
        }
        while(j >= 0){
            A[index--] = B[j--];
        }
    }
}

6. Merge Two Sorted Arrays
public class Solution {
    /**
     * @param A: sorted integer array A
     * @param B: sorted integer array B
     * @return: A new sorted integer array
     */
    public int[] mergeSortedArray(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return null;
        }
        
        int m = A.length;
        int n = B.length;
        
        int[] res = new int[m + n];
        
        int index = 0;
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (A[i] < B[j]) {
                res[index++] = A[i++];
            } else {
                res[index++] = B[j++];
            }
        }
        
        while (i < m) {
            res[index++] = A[i++];
        }
        
        while (j < n) {
            res[index++] = B[j++];
        }
        return res;
    }
}


65. Median of two Sorted Arrays
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return 0.0;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        double [] res = new double[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        
        if((m+n) % 2 == 0){
            return (res[(m + n) / 2] + res[(m + n) / 2 - 1]) / 2;
        } else{
            return res[(m + n) / 2];
        }
    }
}


*************************
这道题可以单层循环解决的，二刷用的简单粗暴的算法，下次重写
149. Best Time to Buy and Sell Stock
二刷：
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        int res = 0;
        if (prices == null || prices.length == 0) {
            return res;
        }
        
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                if (prices[j] - prices[i] > res) {
                    res = prices[j] - prices[i];
                }
            }
        }
        return res;
    }
}

一刷：
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        int res = 0;
        if (prices == null || prices.length == 0) {
            return res;
        }
        
        int min = Integer.MAX_VALUE;
        for (int i : prices) {
            min = i < min ? i : min;
            res = res < i - min ? i - min : res;
        }
        return res;
    }
}

150. Best Time to Buy and Sell Stock II
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        int res = 0;
        if (prices == null || prices.length == 0) {
            return res;
        }
        
        int min = prices[0];
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] <= min) {
                min = prices[i];
            } else {
                res += prices[i] - min;
                min = prices[i];
            }
        }
        return res;
    }
}
*********************************
没写出来，so sad

151. Best Time to Buy and Sell Stock III
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        if(prices == null || prices.length ==0){
            return 0;
        }
        
        int [] left = new int[prices.length];
        int [] right = new int[prices.length];
        //寻找一条分割线，左边找一次利润最大值，右边找一次利润最大值，左右寻找方式和I 相似
        int min = prices[0];
        left[0] = 0;
        for(int i = 1; i < prices.length; i++){
            min = Math.min(prices[i], min);
            left[i] = Math.max(left[i - 1], prices[i] - min); 
         }
         
        right[prices.length - 1] = 0;
        int max = prices[prices.length - 1];
        for (int i = prices.length - 2; i >= 0; i--) {
            max = Math.max(prices[i], max);
            right[i] = Math.max(right[i + 1], max - prices[i]);
        }

        int profit = 0;
        for (int i = 0; i < prices.length; i++){
            profit = Math.max(left[i] + right[i], profit);  
        }
        return profit;
    }
}


//记住怎么保证小的在大的之前，就用这种滑动的方式，永远保证最小值在当前值之前
        for(int i = 1; i < presum.length; i++){
            res = Math.max(res, presum[i] - minpresum);
            minpresum = Math.min(minpresum, presum[i]);
        }
41. Maximum Subarray
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A integer indicate the sum of max subarray
     */
    public int maxSubArray(int[] nums) {
        // write your code here
        int res = Integer.MIN_VALUE;;
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        int[] presum = new int[nums.length + 1];
        presum[0] = 0;
        
        for (int i = 1; i < presum.length; i++) {
            presum[i] = presum[i - 1] + nums[i - 1];
        }
        
        int minpresum = 0;
        //记住怎么保证小的在大的之前，就用这种滑动的方式，永远保证最小值在当前值之前
        for(int i = 1; i < presum.length; i++){
            res = Math.max(res, presum[i] - minpresum);
            minpresum = Math.min(minpresum, presum[i]);
        }
        
        return res;
    }
}

***********************
这道题和前面股票III最大的区别就是，股票最低利润为0而这个可以为负数。
所以前后各取0是不对的，另外就是，因为不是股票，所有从右往左加和不存在先后顺序，可以用从左往右的方法。
42. Maximum Subarray II
public class Solution {
    /*
     * @param nums: A list of integers
     * @return: An integer denotes the sum of max two non-overlapping subarrays
     */
    public int maxTwoSubArrays(List<Integer> nums) {
        int size = nums.size();
        int[] left = new int[size];
        int[] right = new int[size];
        
        int sum = 0;
        int minSum = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < size; i++){
            sum += nums.get(i);
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            left[i] = max;
        }
        
        sum = 0;
        minSum = 0;
        max = Integer.MIN_VALUE;
        //因为不是股票，所以不存在先后顺序
        for(int i = size - 1; i >= 0; i--){
            sum += nums.get(i);
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            right[i] = max;
        }
        /*这个题的思路是，因为 两个subarray 一定不重叠,所以必定存在一条分割线分开这两个 subarrays,枚举分割线的位置*/
        max = Integer.MIN_VALUE;
        for(int i = 0; i < size - 1; i++){
            max = Math.max(max, left[i] + right[i + 1]);
        }
        return max;
    }
}


44. Minimum Subarray
public class Solution {
    /*
     * @param nums: a list of integers
     * @return: A integer indicate the sum of minimum subarray
     */
    public int minSubArray(List<Integer> nums) {
        // write your code here
        int res = Integer.MAX_VALUE;
        if (nums == null || nums.size() == 0) {
            return res;
        }
        
        int sum = 0;
        int maxsum = 0;
        
        
        for (int i = 0; i < nums.size(); i++) {
            sum += nums.get(i);
            res = Math.min(res, sum - maxsum);
            maxsum = Math.max(maxsum, sum);
        }
        
        return res;
    }
}

*****************************
左右开弓，没写出来，so sad
45. Maximum Subarray Difference
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: An integer indicate the value of maximum difference between two
     *          Subarrays
     */
    public int maxDiffSubArrays(int[] nums) {
        // write your code here
        int size = nums.length;
        int[] left_max = new int[size];
        int[] left_min = new int[size];
        int[] right_max = new int[size];
        int[] right_min = new int[size];
        int[] copy = new int[size];
        /*Get negative copy*/
        for(int i = 0; i < size; i++){
            copy[i] = -1 * nums[i];
        }
        int max = Integer.MIN_VALUE;
        int sum = 0;
        int minSum = 0;
        /*Forward: get max subarray*/
        for(int i = 0; i < size; i++){
            sum += nums[i];
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            left_max[i] = max;
        }
        /*Backward: get max subarray*/
        max = Integer.MIN_VALUE;
        sum = 0;
        minSum = 0;
        for(int i = size - 1; i >= 0; i--){
            sum += nums[i];
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            right_max[i] = max;
        }
        /*Forward: get min subarray*/
        max = Integer.MIN_VALUE;
        sum = 0;
        minSum = 0;
        for(int i = 0; i < size; i++){
            sum += copy[i];
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            left_min[i] = -1 * max;
        }
        /*Backward: get min subarray*/
        max = Integer.MIN_VALUE;
        sum = 0;
        minSum = 0;
        for(int i = size - 1; i >= 0; i--){
            sum += copy[i];
            max = Math.max(max, sum - minSum);
            minSum = Math.min(sum, minSum);
            right_min[i] = -1 * max;
        }
        //左右分割，左边找一个小的，右边找一个大的，或者，右边找一个小的，左边找一个大的
        int diff = 0;
        for(int i = 0; i < size - 1; i++){
            diff = Math.max(diff, Math.abs(left_max[i] - right_min[i + 1]));
            diff = Math.max(diff, Math.abs(left_min[i] - right_max[i + 1]));
        }
        return diff;
    }
}

138. Subarray Sum
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> subarraySum(int[] nums) {
        // write your code here
        List<Integer> list = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        if (nums == null || nums.length == 0) {
            return list;
        }

        int sum = 0;
        map.put(sum, -1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum)) {
                list.add(map.get(sum) + 1);
                list.add(i);
            } else {
                map.put (sum, i);
            }
        }
        return list;
    }
}
******************************
没写出来，so sad

139. Subarray Sum Closest
//这道题延续Subarray Sum的思路，即将[0, i]的sum存起来。这里构造了一个新的类，Pair。
//一方面存sum值，一方面存index。然后根据sum值排序，算相邻sum值的差值。差值最小的即为结果。时间复杂度是O(nlogn)，空间复杂度是O(n)。
public class Solution {
    
    class Pair {
        public int sum;
        public int index;
        public Pair(int sum, int index) {
            this.sum = sum;
            this.index = index;
        }
    }
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public int[] subarraySumClosest(int[] nums) {
        // write your code here
        int[] result = new int[2];
        if (nums == null || nums.length == 0) {
            return result;
        }
        int len = nums.length;
        int sum = 0;
        List<Pair> list = new ArrayList<Pair>();
        for (int i = 0; i < len; i++) {
            sum += nums[i];
            Pair tmp = new Pair(sum, i);
            list.add(tmp);
        }
        Collections.sort(list, new Comparator<Pair>() {
            public int compare(Pair a, Pair b) {
                return (a.sum - b.sum);
            }
        });
        int min = Integer.MAX_VALUE;
        for (int i = 1; i < len; i++) {
            int diff = list.get(i).sum - list.get(i - 1).sum;
            if (diff < min) {
                min = diff;
                int index1 = list.get(i).index;
                int index2 = list.get(i - 1).index; //prefixsum是一段值，是从前面的i+1开始的，所以前一个index要加1
                if (index1 < index2) {
                    result[0] = index1 + 1;
                    result[1] = index2;
                } else {
                    result[0] = index2 + 1;
                    result[1] = index1;
                }
            }
        }
        return result;
    }
}

这道题当然也可以用双指针的办法，但是要注意排序后index会发生变化
56. Two Sum
public class Solution {
    /**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1, index2] (index1 < index2)
     */
    public int[] twoSum(int[] numbers, int target) {
        // write your code here
        int[] res = new int[2];
        if (numbers.length < 1) {
            return res;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < numbers.length; i++) {
            int num = target - numbers[i];
            if (map.containsKey(num)) {
                res[0] = map.get(num);
                res[1] = i;
                return res;
            } else {
                map.put(numbers[i], i);
            }
        }
        return res;
    }
}


57. 3Sum
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    public List<List<Integer>> threeSum(int[] numbers) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        if (numbers.length < 3) {
            return res;
        }
        
        Arrays.sort(numbers);
        
        Set<List<Integer>> set=new HashSet<>();//in case the depulicate list added
        
        for (int i = 0; i < numbers.length - 2; i++) {
            int left = i + 1;
            int right = numbers.length - 1;
            
            while (left < right) {
                if (numbers[left] + numbers[right] + numbers[i] == 0) {
                    List<Integer> list = new ArrayList<>();
                    list.add(numbers[i]);
                    list.add(numbers[left]);
                    list.add(numbers[right]);
                    if (!set.contains(list)) {
                        set.add(list);
                        res.add(list);
                    }
                    
                    left++;
                    right--;
                } else if (numbers[left] + numbers[right] + numbers[i] > 0) {
                    right--;
                } else {
                    left++;
                }
            }
        }
        
        return res;
    }
}

*********************************************
多加个if的事情，又tmd把自己写晕了
59. 3Sum Closest
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @param target: An integer
     * @return: return the sum of the three integers, the sum closest target.
     */
    public int threeSumClosest(int[] numbers, int target) {
        // write your code here
        int res = 0;
        if (numbers.length < 3 || numbers == null) {
            return res;
        }
        
        Arrays.sort(numbers);
        int diff = Integer.MAX_VALUE;
        for (int i = 0; i < numbers.length; i++) {
            int left = i + 1;
            int right = numbers.length - 1;
            while (left < right) {
                int sum = numbers[i] + numbers[left] + numbers[right];
                if (Math.abs(sum - target) < diff) {
                    diff = Math.abs(sum - target);
                    res = sum;
                }
                if (sum == target) {
                    return target;
                } else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        
        return res;
    }
}

和3sum如出一辙
58. 4Sum
public class Solution {
    /**
     * @param numbers: Give an array
     * @param target: An integer
     * @return: Find all unique quadruplets in the array which gives the sum of zero
     */
    public List<List<Integer>> fourSum(int[] numbers, int target) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        if (numbers.length < 4 || numbers == null) {
            return res;
        }
        
        Arrays.sort(numbers);
        
        Set<List<Integer>> set = new HashSet<>();
        
        for (int i = 0; i < numbers.length - 3; i++) {
            for (int j = i + 1; j < numbers.length - 2; j++) {
                int left = j + 1;
                int right = numbers.length - 1;
                while (left < right) {
                    int sum = numbers[i] + numbers[j] + numbers[left] + numbers[right];
                    if (sum == target) {
                        List<Integer> list = new ArrayList<>();
                        list.add(numbers[i]);
                        list.add(numbers[j]);
                        list.add(numbers[left]);
                        list.add(numbers[right]);
                        if (!set.contains(list)) {
                            set.add(list);
                            res.add(list);
                        }
                        left++;
                        right--;
                    } else if (sum > target) {
                        right--;
                    } else {
                        left++;
                    }
                }
            }
        }
        return res;
    }
}

没写出来，so sad，注意下面left < right的等号不能去，不然会有极端情况出现
但是sort low case却不用，因为全是大写或者小写也可以，不需要返回index，不会出错
31. Partition Array
public class Solution {
    /**
     * @param nums: The integer array you should partition
     * @param k: An integer
     * @return: The index after partition
     */
    public int partitionArray(int[] nums, int k) {
        // write your code here
        if (nums.length == 0 || nums == null) {
            return 0;
        }
        
        int left = 0;
        int right = nums.length - 1;
        
        while (left < right) {

            while (left <= right && nums[left] < k) {
                left++;
            }

            while (left <= right && nums[right] >= k) {
                right--;
            }

            if (left < right) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                
                left++;
                right--;
            }
        }
        return left;
    }
}


49. Sort Letters by Case
public class Solution {
    /*
     * @param chars: The letter array you should sort by Case
     * @return: nothing
     */
    public void sortLetters(char[] chars) {
        // write your code here
        if (chars == null || chars.length == 0) {
            return;
        }
        
        int left = 0;
        int right = chars.length - 1;
        
        while (left < right) {
            while (left < right && chars[left] >= 'a' && chars[left] <= 'z') {
                left++;
            }
            while (left < right && chars[right] >= 'A' && chars[right] <= 'Z') {
                right--;
            } 
            
            if (left < right) {
                char temp = chars[left];
                chars[left] = chars[right];
                chars[right] = temp;
                left++;
                right--;
            }
        }
    }
}

还是没有背下来，下次一定背下来
148. Sort Colors
inplace的方法，背下来
class Solution {
    public void sortColors(int[] nums) {
        int i = -1;
        int j = -1;
        int k = -1;
        int n=nums.length;
        for(int p = 0; p < n; p ++)
        {
            //根据第i个数字，挪动0~i-1串。
            if(nums[p] == 0)
            {
                nums[++k] = 2;    //2往后挪
                nums[++j] = 1;    //1往后挪
                nums[++i] = 0;    //0往后挪
            }
            else if(nums[p] == 1)
            {
                nums[++k] = 2;
                nums[++j] = 1;
            }
            else
                nums[++k] = 2;
        }
    }
}


********************************
没写出来，so sad
144. Interleaving Positive and Negative Numbers
public class Solution {
    /*
     * @param A: An integer array.
     * @return: nothing
     */
     /*O(n) time, O(1) extra space

先用两根指针分成左 - 右 + 两部分, 再进行穿插
穿插需要分情况讨论 (左 - 右 + 的前提下)
如果 - 多, 那么从第2个数和倒数第1个数开始交换
如果 + 多, 那么从第1个数和倒数第2个数开始交换
如果一样多, 那么从第1个数和倒数第1个数开始交换*/
    public void rerange(int[] A) {
        if (A == null || A.length == 0) {
            return;
        }
        int left = 0, right = A.length - 1;
        while (left < right) {
            if (A[left] < 0) {
                left++;
                continue;
            }
            if (A[right] > 0) {
                right--;
                continue;
            }
            int tmp = A[left];
            A[left] = A[right];
            A[right] = tmp;
            left++;
            right--;
        }
        if (left > A.length - left) {
            interleave(A, 1, A.length - 1);
        } else if (left < A.length - left) {
            interleave(A, 0, A.length - 2);
        } else {
            interleave(A, 0, A.length - 1);
        }
    }
    
    private void interleave(int[] A, int start, int end) {
        while (start < end) {
            int tmp = A[start];
            A[start] = A[end];
            A[end] = tmp;
            start += 2;
            end -= 2;
        }
    }
}
