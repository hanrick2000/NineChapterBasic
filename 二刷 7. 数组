39. Recover Rotated Sorted Array
public class Solution {
    /**
     * @param nums: An integer array
     * @return: nothing
     */
    public void recoverRotatedSortedArray(List<Integer> nums) {
        // write your code here
        if (nums.size() == 0) {
            return;
        }
        int cut = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums.get(i) < nums.get(i - 1)) {
                cut = i - 1;
                reverse(0, cut, nums);
                reverse(cut + 1, nums.size() - 1, nums);
                reverse(0, nums.size() - 1, nums);
                return;
            }
        }
    }
    public void reverse(int start, int end, List<Integer> nums){
        for (int i = start, j = end; i < j; i++, j--) {
            Integer temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j,temp);
        }
    }
}

*************************
如果想往for循环里面添加多个判断条件，需要用&&和||连接
8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if (str == null || str.length == 0) {
            return;
        }
        
       
        int length = str.length;
        offset = offset % length;
        
        reverse(str, 0, length - offset - 1);
        reverse(str, length - offset, length - 1);
        reverse(str, 0, length - 1);
    }
    public void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++,j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}
********************
这道题可以多写几遍
关于stringbuilder
53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return "";
        }
        String [] array = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for(int i = array.length - 1; i >= 0; i--){
            if(!array[i].equals("")){
                sb.append(array[i]);
                sb.append(" ");
            }
        }
        //sb maybe empty if s only have space.
        //when new string show up, we should consider the extreme situation
        return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
    }
}

****************************************
while循环比for循环好点
64. Merge Sorted Array
public class Solution {
    /*
     * @param A: sorted integer array A which has m elements, but size of A is m+n
     * @param m: An integer
     * @param B: sorted integer array B which has n elements
     * @param n: An integer
     * @return: nothing
     */
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        // write your code here
        if (m == 0 && n == 0) {
            return;
        }
        
        int index = m + n - 1;
        int i = m - 1;
        int j = n - 1;
        
        while (i >= 0 && j >= 0) {
            if (A[i] > B[j]) {
                A[index--] = A[i--];
            } else {
                A[index--] = B[j--];
            }
        }
        
        while(i >= 0){
            A[index--] = A[i--];
        }
        while(j >= 0){
            A[index--] = B[j--];
        }
    }
}

6. Merge Two Sorted Arrays
public class Solution {
    /**
     * @param A: sorted integer array A
     * @param B: sorted integer array B
     * @return: A new sorted integer array
     */
    public int[] mergeSortedArray(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return null;
        }
        
        int m = A.length;
        int n = B.length;
        
        int[] res = new int[m + n];
        
        int index = 0;
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (A[i] < B[j]) {
                res[index++] = A[i++];
            } else {
                res[index++] = B[j++];
            }
        }
        
        while (i < m) {
            res[index++] = A[i++];
        }
        
        while (j < n) {
            res[index++] = B[j++];
        }
        return res;
    }
}


65. Median of two Sorted Arrays
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return 0.0;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        double [] res = new double[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        
        if((m+n) % 2 == 0){
            return (res[(m + n) / 2] + res[(m + n) / 2 - 1]) / 2;
        } else{
            return res[(m + n) / 2];
        }
    }
}


*************************
这道题可以单层循环解决的，二刷用的简单粗暴的算法，下次重写
149. Best Time to Buy and Sell Stock
二刷：
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        int res = 0;
        if (prices == null || prices.length == 0) {
            return res;
        }
        
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                if (prices[j] - prices[i] > res) {
                    res = prices[j] - prices[i];
                }
            }
        }
        return res;
    }
}

一刷：
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        int res = 0;
        if (prices == null || prices.length == 0) {
            return res;
        }
        
        int min = Integer.MAX_VALUE;
        for (int i : prices) {
            min = i < min ? i : min;
            res = res < i - min ? i - min : res;
        }
        return res;
    }
}
