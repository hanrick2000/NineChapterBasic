没写出来
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */


public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null) {
            return node;
        }
        
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        
        UndirectedGraphNode newNode = new UndirectedGraphNode(node.label);
        map.put(node, newNode);
        queue.offer(node);
        
        while (!queue.isEmpty()) {
            UndirectedGraphNode temp = queue.poll();
            List<UndirectedGraphNode> neighbors = temp.neighbors;
            for (UndirectedGraphNode neighbor : neighbors) {
                if (!map.containsKey(neighbor)) {
                    map.put(neighbor, new UndirectedGraphNode(neighbor.label));
                    queue.offer(neighbor);
                }
                map.get(temp).neighbors.add(map.get(neighbor));
            }
            
        }
        
        return newNode;
    }
}

105. Copy List with Random Pointer
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        
        if (head == null) {// edge case
            return null;
        }
        
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode dummy = new RandomListNode(0);
        dummy.next = head;
        //copy nodes
        while (head != null) {
            map.put(head, new RandomListNode(head.label));
            head = head.next;
        }
        head = dummy.next;
        //copy links
        while (head != null) {
            map.get(head).next = map.get(head.next);
            map.get(head).random = map.get(head.random);
            head = head.next;
        }
        
        return map.get(dummy.next);
    }
}

没写出来，要考虑入度
127. Topological Sorting
/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        //edge case
        if (graph == null) {
            return null;
        }
        Map<DirectedGraphNode, Integer> map = new HashMap<>();
        //count the in degree
        for (DirectedGraphNode node : graph) {
            for (DirectedGraphNode neighbor : node.neighbors) {
                if (map.containsKey(neighbor)) {
                    map.put(neighbor, map.get(neighbor) + 1);
                } else {
                    map.put(neighbor, 1);
                }
            }
        }
        
        ArrayList<DirectedGraphNode> res = new ArrayList<>();
        Queue<DirectedGraphNode> queue = new LinkedList<>();
        //add in degree == 0 node
        for (DirectedGraphNode node : graph) {
            if (!map.containsKey(node)) {
                res.add(node);
                queue.offer(node);
            }
        }
        //find next in degree == 0
        while (!queue.isEmpty()) {
            DirectedGraphNode temp = queue.poll();
            for (DirectedGraphNode neighbor : temp.neighbors) {
                map.put(neighbor, map.get(neighbor) - 1);
                if (map.get(neighbor) == 0) {
                    res.add(neighbor);
                    queue.add(neighbor);
                }
            }
        }
        return res; 
    }
}

求子集，时间复杂度O(2^n) 决策树 画出来就知道了 也可以归纳总结 solve n = 1需要2， solve n = 2需要4
注意传值和传参的区别
res.add(new ArrayList<Integer>(list)); 
            //注意不能用res.add(list) 因为java是pass by value，所以在不停的copy同一个对象的reference
            //但是这个对象最后是空，所有的reference指向同一个对象。而这个对象最后为空，所以全是空。
            //但是如果在这中间过程中, new了一个新对象，那么传进去的是新对象的reference，相当于把改变的过程每次都copy一份保存了起来
            http://www.importnew.com/3559.html
            
不能算写出来了，但是至少思路有的
15. Permutations
public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        
        if(nums == null){
            return res;
        }
        if(nums.length == 0){
            res.add(new ArrayList<Integer>());
            return res;
        }
        List<Integer> temp = new ArrayList<Integer>();
        dfs(res, nums, temp);
        return res;
    }
    public void dfs(List<List<Integer>> res, int[] nums, List<Integer>temp){
        if(temp.size() == nums.length){
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if (temp.contains(nums[i])) {// make sure next loop won't add same number
                continue;
            }
            temp.add(nums[i]);
            dfs(res, nums, temp);
            temp.remove(temp.size() - 1);
        }
        return;// void函数隐式存在return
    }
}

