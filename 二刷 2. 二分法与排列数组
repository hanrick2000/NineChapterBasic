**********************
二分法的应用，一开始没有想到用寻找左边界二分，然后再寻找右边界二分。
只是想到先找到中点，然后再用另外两个指针平移，这样会有最坏情况，就是所有的数字都一样，会有最坏的情况，O(N) TLE
二分法的精髓在于，最后会划分成只有两个数字的区间，按照要求判断即可！
61. Search for a Range
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] bound = new int[]{-1, -1};
        
        if(A == null || A.length == 0){
            return bound;
        }
        
        int start, end, mid;
         
        // search for left bound
        start = 0; 
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] == target) {
            bound[0] = start;
        } else if (A[end] == target) {
            bound[0] = end;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        // search for right bound
        start = 0;
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                start = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[end] == target) {
            bound[1] = end;
        } else if (A[start] == target) {
            bound[1] = start;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        return bound;
    }
}

60. Search Insert Position
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        int index = 0;
        if (A == null || A.length == 0) {
            return index;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(A[mid] == target) {
                return mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] >= target) {
            index = start;
        } else if (A[end] < target) {
            index = end + 1;
        } else {
            index = end;
        }
        return index;
    }
}
******************************
test是通过了，但是不如一刷的代码优美，row的选择就是row的选择，不掺杂判断，最后在col里面判断即可，减少重复判断
28. Search a 2D Matrix
二刷：
public class Solution {
    /**
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int row = 0;
        int n = matrix.length;//row
        int m = matrix[0].length;//column
        
        int startn = 0;
        int endn = n - 1;
        // select the row
        while (startn + 1 < endn) {
            int mid = startn + (endn - startn) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] < target) {
                startn = mid;
            } else {
                endn = mid;
            }
        }
        if (matrix[startn][0] > target || matrix[endn][m - 1] < target){
            return false;
        } else if (matrix[startn][0] == target || matrix[endn][0] == target) {
            return true;
        } else {
            if (target < matrix[endn][0]) {
                row = startn;
            } else {
                row = endn;
            }
        }
        
        //select the colunm
        int startm = 0;
        int endm = m - 1;
        while (startm + 1 < endm) {
            int mid = startm + (endm - startm) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                startm = mid;
            } else {
                endm = mid;
            }
        }
        
        if (matrix[row][startm] == target || matrix[row][endm] == target) {
            return true;
        }
        return false;
    }
}

一刷：
public class Solution {
    /*
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return false;
        }
        int row = matrix.length;
        int column = matrix[0].length;
        
        // find the row index, the last number <= target 
        int start = 0, end = row - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (matrix[end][0] <= target) {
            row = end;
        } else if (matrix[start][0] <= target) {
            row = start;
        } else {
            return false;
        }
        
        // find the column index, the number equal to target
        start = 0;
        end = column - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (matrix[row][start] == target) {
            return true;
        } else if (matrix[row][end] == target) {
            return true;
        }
        return false;
    }
}
************************************
这道题充分说明了代码写不好，数学来凑，一刷用数学思考，从左下角到右上角扫描，记住这种思维，
二刷用的普通的二维数组转换为一维数组的办法
二刷：
38. Search a 2D Matrix II
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        int count = 0;
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return count;
        }
        int n = matrix.length;
        int m = matrix[0].length;
        
        int[] tran = new int[n * m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                tran[i * m + j] = matrix[i][j];
            }
        }
        
        for (int i = 0; i < tran.length; i++) {
            if (target == tran[i]) {
                count++;
            }
        }
        return count;
    }
}
一刷：
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // check corner case
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return 0;
        }
        
        // from bottom left to top right
        int n = matrix.length;
        int m = matrix[0].length;
        int x = n - 1;
        int y = 0;
        int count = 0;
        
        while (x >= 0 && y < m) {
            if (matrix[x][y] < target) {
                y++;
            } else if (matrix[x][y] > target) {
                x--;
            } else {
                count++;
                x--;
                y++;
            }
        }
        return count;
    }
}

74. First Bad Version
/**
 * public class SVNRepo {
 *     public static boolean isBadVersion(int k);
 * }
 * you can use SVNRepo.isBadVersion(k) to judge whether 
 * the kth code version is bad or not.
*/

public class Solution {
    /*
     * @param n: An integer
     * @return: An integer which is the first bad version.
     */
    public int findFirstBadVersion(int n) {
        // write your code here
        if (n <= 0) {
            return 0;
        }
        int start = 1;
        int end = n;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (SVNRepo.isBadVersion(mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (SVNRepo.isBadVersion(start)) {
            return start;
        } else if (SVNRepo.isBadVersion(end)) {
            return end;
        }
        return 0;
    }
}

75. Find Peak Element
二刷 TLE
最坏的情况递增超时，如果没有可以和mid对比的target，可以想一想怎么把mid进行操作，比如和mid的前后比较
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if (A == null || A.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = start + 1;
        while (start < A.length - 1) {
            while (end < A.length) {
                if (A[start] <= A[end]) {
                    start++;
                    end++;
                } else {
                    return start;
                }
            }
        }
        return 0;
    }
}
一刷：
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return 0;
        }
        
        int start = 1, end = A.length - 2;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(A[mid] < A[mid + 1]){
                start = mid;
            }else if(A[mid] < A[mid - 1]){
                end = mid;
            }else {
                end = mid;//mid在峰顶
            }// start = mid也行
        }
        if(A[start] < A[end]) {
            return end;
        } else { 
            return start;
        }
    }
}

**************************
二刷的思路更加清晰简洁
159. Find Minimum in Rotated Sorted Array
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = nums.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[start] > nums[end]) {//rotate
                if (nums[mid] < nums[end]) {
                    end = mid;
                } else if (nums[mid] > nums[end]) {
                    start = mid;
                }
            } else {
                return nums[start];
            }
        }
        
        if (nums[start] < nums[end]) {
            return nums[start];
        } else {
            return nums[end];
        }
    }
}
***************************
当有重复的数字时候，要考虑怎么移动指针，把重复的数绕过去
然后更改start和end时候 先判断有顺序的一边
160. Find Minimum in Rotated Sorted Array II
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return -1;
        }
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(nums[mid] == nums[end]){
                end--;//挪动指针，start++也可以
            } else if (nums[mid] > nums[end]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if(nums[start] < nums[end]){
            return nums[start];
        } else {
            return nums[end];
        }
    }
}

****************************
之前分为rotate or not的思路不能用时候，就要换一种思路
看看区间性，比如target是否在给定区间，这个区间是否对rotate or not都适用，如果适用，就可以
62. Search in Rotated Sorted Array
public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return -1;
        }

        int start = 0;
        int end = A.length - 1;
        int mid;
        
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
            }
            if (A[start] < A[mid]) {
                // situation 1, red line
                if (A[start] <= target && target <= A[mid]) {// target在区间内
                    end = mid;
                } else {
                    start = mid;
                }
            } else {
                // situation 2, green line
                if (A[mid] <= target && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            }
        } // while
        
        if (A[start] == target) {
            return start;
        }
        if (A[end] == target) {
            return end;
        }
        return -1;
    }
}

63. Search in Rotated Sorted Array II
public class Solution {
    /**
     * @param A: an integer ratated sorted array and duplicates are allowed
     * @param target: An integer
     * @return: a boolean 
     */
    public boolean search(int[] nums, int target) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return false;
        }
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end){
            int mid = start + (end - start) / 2;
            if (nums[mid] == target)
                return true;
            if (nums[start] < nums[mid]){
                if (nums[start] <= target && target < nums[mid])
                    end = mid;
                else
                    start = mid;
            }else if(nums[start] > nums[mid]){
                if (nums[mid] < target && target <= nums[end])
                    start = mid;
                else
                    end = mid;
            }else {
                //If nums[start] == nums[mid], just move start to the next index. 
                //So the worst case, that the array's elements are same, is O(n).
                start++;//因为之前的判断是mid和start在比较，所以移动start
                //移动end也行，但是前面的判断，永远先根据一边有顺序的判断
            }
        }
        if (nums[start] == target) {
            return true;
        }
        if (nums[end] == target) {
            return true;
        }
        return false;
    }
}


**********************************
这道题目很经典，必须要掌握
65. Median of two Sorted Arrays
二刷：
一种笨方法，merge两个数组到一个数组中去，时间复杂度O(M + N),空间复杂度O(M + N)
如果findkth改成这种，时间复杂度为O(K),空间复杂度为O(1),但是时间复杂度最坏为O(M + N)

    private int findKth(int[] nums1, int[] nums2, int k){
        int p = 0, q = 0;
        for(int i = 0; i < k - 1; i++){
            if(p>=nums1.length && q<nums2.length){
                q++;
            } else if(q>=nums2.length && p<nums1.length){
                p++;
            } else if(nums1[p]>nums2[q]){
                q++;
            } else {
                p++;
            }
        }
        if(p>=nums1.length) {
            return nums2[q];
        } else if(q>=nums2.length) {
            return nums1[p];
        } else {
            return Math.min(nums1[p],nums2[q]);
        }
    }
    
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        int total = len1 + len2;
        if(total % 2==0){
            return (findKth(nums1,nums2,total/2)+findKth(nums1,nums2,total/2+1))/2.0;
        } else {
            return findKth(nums1,nums2,total/2+1);
        }
    }
    private int findKth(int[] A, int[] B, int index){
        int m = A.length;
        int n = B.length;
        int[] C = new int[m + n];
        int k = 0;
        int i=0,j=0;//定义下标，其中i是向量1的下标，j是向量2的下标
        while(i<m&&j<n)
        {
            if(A[i]<=B[j])
                C[k++]=A[i++];
            else
                C[k++]=B[j++];
        }
        //数组B还有剩余部分，将数组B剩余部分依次插入
        if(i==m)
        {
            while(j<n)
                C[k++]=B[j++];
        }
        else if(j==n)//数组A还有剩余部分，将数组A剩余部分依次插入
        {
            while(i<m)
                C[k++]=A[i++];
        }
        return C[index - 1];
    }
}

二分法，时间复杂度O(log(m+n))
假设A和B的元素个数都大于k/2，我们将A的第k/2个元素（即A[k/2-1]）和B的第k/2个元素（即B[k/2-1]）进行比较
A[k/2-1] > B[k/2-1]
A[k/2-1] < B[k/2-1]
如果A[k/2-1] < B[k/2-1]，意味着A[0]到A[k/2-1]不可能到二分的位置，直接删除即可。
因此，我们可以写一个递归函数。那么函数什么时候应该终止呢？
当A或B是空时，直接返回B[k-1]或A[k-1]；
当k=1是，返回min(A[0], B[0])；
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len = nums1.length + nums2.length; 
        if (len % 2 == 1) { 
            return findKth(nums1, 0, nums2, 0, len / 2 + 1); 
        } else { 
            return (findKth(nums1, 0, nums2, 0, len / 2) + findKth(nums1, 0, nums2, 0, len / 2 + 1)) / 2.0; 
        } 
    } 
     
    public int findKth(int[] A, int startA, int[] B, int startB, int k) { 
        if (startA >= A.length) { //A 中元素不够了
            return B[startB + k - 1]; 
        } 
         
        if (startB >= B.length) { 
            return A[startA + k - 1]; 
        } 
         
        if (k == 1) { 
            return Math.min(A[startA], B[startB]); 
        } 
         
        int indexA = startA + k / 2 - 1; 
        int indexB = startB + k / 2 - 1; 
        int keyA = indexA < A.length ? A[indexA] : Integer.MAX_VALUE; //If the array has no more than k /2 elements, we set key = MAX_VALUE.
        int keyB = indexB < B.length ? B[indexB] : Integer.MAX_VALUE; //if A is not enough, we can only find it from B
         
        if (keyA < keyB) { 
            return findKth(A, startA + k / 2, B, startB, k - k / 2); 
        } else { 
            return findKth(A, startA, B, startB + k / 2, k - k / 2); 
        } 
    } 
}

************************************
三步翻转法，很经典，记住了！两个指针从头和尾扫描交换
39. Recover Rotated Sorted Array
public class Solution {
    /**
     * @param nums: An integer array
     * @return: nothing
     */
    public void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }
    public void recoverRotatedSortedArray(List<Integer> nums) {
        // write your code here
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums.get(i) > nums.get(i + 1)) {
                reverse(nums, 0, i);
                reverse(nums, i + 1, nums.size() - 1);
                reverse(nums, 0, nums.size() - 1);
            }
        }
    }
}
//依旧是三步反转法
8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
    public void rotateString(char[] str, int offset) {
        // write your code here
        if(str == null || str.length == 0){
            return;
        }
        offset = offset % str.length;
        reverse(str, 0, str.length - offset - 1);
        reverse(str, str.length - offset, str.length - 1);
        reverse(str, 0, str.length - 1);
    }
}
************************
考察一些stringbuilder的用法 比如append，substring，toString
还有String数组的用法，String[] array = s.split(" ")
53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if (s == null || s.length() == 0) {
            return "";
        }
        
        String[] array = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = array.length - 1; i >= 0; i--) {
            if(!array[i].equals("")){//in case multiple space
                sb.append(array[i]).append(" ");
            }
        }
        //return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
        return sb.toString();
    }
}
