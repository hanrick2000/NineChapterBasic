**********************
二分法的应用，一开始没有想到用寻找左边界二分，然后再寻找右边界二分。
只是想到先找到中点，然后再用另外两个指针平移，这样会有最坏情况，就是所有的数字都一样，会有最坏的情况，O(N) TLE
二分法的精髓在于，最后会划分成只有两个数字的区间，按照要求判断即可！
61. Search for a Range
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] bound = new int[]{-1, -1};
        
        if(A == null || A.length == 0){
            return bound;
        }
        
        int start, end, mid;
         
        // search for left bound
        start = 0; 
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] == target) {
            bound[0] = start;
        } else if (A[end] == target) {
            bound[0] = end;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        // search for right bound
        start = 0;
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                start = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[end] == target) {
            bound[1] = end;
        } else if (A[start] == target) {
            bound[1] = start;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        return bound;
    }
}

60. Search Insert Position
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        int index = 0;
        if (A == null || A.length == 0) {
            return index;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(A[mid] == target) {
                return mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] >= target) {
            index = start;
        } else if (A[end] < target) {
            index = end + 1;
        } else {
            index = end;
        }
        return index;
    }
}
******************************
test是通过了，但是不如一刷的代码优美，row的选择就是row的选择，不掺杂判断，最后在col里面判断即可，减少重复判断
28. Search a 2D Matrix
public class Solution {
    /**
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int row = 0;
        int n = matrix.length;//row
        int m = matrix[0].length;//column
        
        int startn = 0;
        int endn = n - 1;
        // select the row
        while (startn + 1 < endn) {
            int mid = startn + (endn - startn) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] < target) {
                startn = mid;
            } else {
                endn = mid;
            }
        }
        if (matrix[startn][0] > target || matrix[endn][m - 1] < target){
            return false;
        } else if (matrix[startn][0] == target || matrix[endn][0] == target) {
            return true;
        } else {
            if (target < matrix[endn][0]) {
                row = startn;
            } else {
                row = endn;
            }
        }
        
        //select the colunm
        int startm = 0;
        int endm = m - 1;
        while (startm + 1 < endm) {
            int mid = startm + (endm - startm) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                startm = mid;
            } else {
                endm = mid;
            }
        }
        
        if (matrix[row][startm] == target || matrix[row][endm] == target) {
            return true;
        }
        return false;
    }
}

************************************
这道题充分说明了代码写不好，数学来凑，一刷用数学思考，从左下角到右上角扫描，记住这种思维，
二刷用的普通的二维数组转换为一维数组的办法
二刷：
38. Search a 2D Matrix II
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        int count = 0;
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return count;
        }
        int n = matrix.length;
        int m = matrix[0].length;
        
        int[] tran = new int[n * m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                tran[i * m + j] = matrix[i][j];
            }
        }
        
        for (int i = 0; i < tran.length; i++) {
            if (target == tran[i]) {
                count++;
            }
        }
        return count;
    }
}
一刷：
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // check corner case
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return 0;
        }
        
        // from bottom left to top right
        int n = matrix.length;
        int m = matrix[0].length;
        int x = n - 1;
        int y = 0;
        int count = 0;
        
        while (x >= 0 && y < m) {
            if (matrix[x][y] < target) {
                y++;
            } else if (matrix[x][y] > target) {
                x--;
            } else {
                count++;
                x--;
                y++;
            }
        }
        return count;
    }
}
