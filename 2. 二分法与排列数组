61. Search for a Range 
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] bound = new int[]{-1, -1};
        
        if(A == null || A.length == 0){
            return bound;
        }
        
        int start, end, mid;
         
        // search for left bound
        start = 0; 
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] == target) {
            bound[0] = start;
        } else if (A[end] == target) {
            bound[0] = end;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        // search for right bound
        start = 0;
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                start = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[end] == target) {
            bound[1] = end;
        } else if (A[start] == target) {
            bound[1] = start;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        return bound;
    }
}

60. Search Insert Position
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        if(A == null || A.length == 0){
            return 0;
        }
        //find the first position >= target
        int start = 0, end = A.length - 1;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(A[mid] == target){
                return mid;
            }
            else if(A[mid] < target){
                start = mid;
            }
            else{
                end = mid;
            }
        }
        if(A[start] >= target){
            return start;
        }
        else if(A[end] >= target){
            return end;
        }
        else{
            return end + 1;
        }
    }
}

28. Search a 2D Matrix
public class Solution {
    /*
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return false;
        }
        int row = matrix.length;
        int column = matrix[0].length;
        
        // find the row index, the last number <= target 
        int start = 0, end = row - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (matrix[end][0] <= target) {
            row = end;
        } else if (matrix[start][0] <= target) {
            row = start;
        } else {
            return false;
        }
        
        // find the column index, the number equal to target
        start = 0;
        end = column - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (matrix[row][start] == target) {
            return true;
        } else if (matrix[row][end] == target) {
            return true;
        }
        return false;
    }
}

38. Search a 2D Matrix II
public class Solution {
    /*
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        
        int row = matrix.length;
        int col = matrix[0].length;
        int x = row - 1;
        int y = 0;
        int count = 0;
        //From bottom left to top right
        while(x >= 0 && y < col){
            if(matrix[x][y] < target){
                y++;
            }
            else if(matrix[x][y]>target){
                x--;
            }
            else{
                count++;
                x--;
                y++;
            }
        }
        return count;
    }
}

74. First Bad Version
/**
 * public class SVNRepo {
 *     public static boolean isBadVersion(int k);
 * }
 * you can use SVNRepo.isBadVersion(k) to judge whether 
 * the kth code version is bad or not.
*/

public class Solution {
    /*
     * @param n: An integer
     * @return: An integer which is the first bad version.
     */
    public int findFirstBadVersion(int n) {
        // write your code here
        int start = 1, end = n;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(SVNRepo.isBadVersion(mid)){
                end = mid;
            }
            else{
                start = mid;
            }
        }
        if(SVNRepo.isBadVersion(start)){
                return start;
            }
        if(SVNRepo.isBadVersion(end)){
            return end;
        }
        return end;
    }
}

75. Find Peak Element
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return 0;
        }
        
        int start = 1, end = A.length - 2;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(A[mid] < A[mid + 1]){
                start = mid;
            }else if(A[mid] < A[mid - 1]){
                end = mid;
            }else {
                end = mid;//mid在峰顶
            }// start = mid也行
        }
        if(A[start] < A[end]) {
            return end;
        } else { 
            return start;
        }
    }
}

159. Find Minimum in Rotated Sorted Array
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        int start = 0, end = nums.length - 1;
        int target = nums[nums.length - 1];//为啥要取最后一个，因为如果数组没有旋转，也符合
        
        // find the first element <= target
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] <= target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (nums[start] <= nums[end]) {
            return nums[start];
        } else {
            return nums[end];
        }
    }
}

160. Find Minimum in Rotated Sorted Array II
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return -1;
        }
        int start = 0;
        int end = nums.length - 1;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] == nums[end]){
                end--;//因为是递增的序列，所以移动后面对最小值没有影响
            } else if(nums[mid] > nums[end]){
                start = mid;
            } else{
                end = mid;
            }
        }
        if(nums[start] < nums[end]){
            return nums[start];
        } else{
            return nums[end];
        }
    }
}

62. Search in Rotated Sorted Array
public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return -1;
        }

        int start = 0;
        int end = A.length - 1;
        int mid;
        
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
            }
            if (A[start] < A[mid]) {
                // situation 1, red line
                if (A[start] <= target && target <= A[mid]) {// target在区间内
                    end = mid;
                } else {
                    start = mid;
                }
            } else {
                // situation 2, green line
                if (A[mid] <= target && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            }
        } // while
        
        if (A[start] == target) {
            return start;
        }
        if (A[end] == target) {
            return end;
        }
        return -1;
    }
}

63. Search in Rotated Sorted Array II
public class Solution {
    /*
     * @param A: an integer ratated sorted array and duplicates are allowed
     * @param target: An integer
     * @return: a boolean 
     */
    public boolean search(int[] nums, int target) {
        // write your code here
         if (nums == null || nums.length == 0) {
            return false;
        }
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end){
            int mid = start + (end - start) / 2;
            if (nums[mid] == target)
                return true;
            if (nums[start] < nums[mid]){
                if (nums[start] <= target && target < nums[mid])
                    end = mid;
                else
                    start = mid;
            }else if(nums[start] > nums[mid]){
                if (nums[mid] < target && target <= nums[end])
                    start = mid;
                else
                    end = mid;
            }else {
                //If nums[start] == nums[mid], just move start to the next index. 
                //So the worst case, that the array's elements are same, is O(n).
                start++;//因为之前的判断是mid和start在比较，所以移动start
            }
        }
        if (nums[start] == target) {
            return true;
        }
        if (nums[end] == target) {
            return true;
        }
        return false;
    }
}

65. Median of two Sorted Arrays
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        int n = A.length;
        int m = B.length;
        if ((m + n) % 2 == 1) {
            return helper(A, 0, B, 0, (n + m) / 2);
        } else {
            return (helper(A, 0, B, 0, (n + m) / 2) 
                    + helper(A, 0, B, 0, (n + m) / 2 - 1)) / 2; 
        }
    }
    
    private double helper(int[] A, int startA, int[] B, int startB, int k) {
        //find the element with index k in the merged array
        if (k == 0) {
            if (startA == A.length) {
                return B[startB];
            }
            if (startB == B.length) {
                return A[startA];
            }
            if (A[startA] > B[startB]) {
                return B[startB];
            } else {
                return A[startA];
            }
        }
        
        if (k == 1) {
            if (startA == A.length) {
                return B[startB + 1];
            }
            if (startB == B.length) {
                return A[startA + 1];
            }
            if (A[startA] > B[startB]) {
                return helper(A, startA, B, startB + 1, 0);
            } else {
                return helper(A, startA + 1, B, startB, 0);
            }
        }
        
        int mid = k / 2;
        if (startA + mid  >= A.length) {
            return helper(A, startA, B, startB + mid, k - mid);
        }
        if (startB + mid  >= B.length) {
            return helper(A, startA + mid, B, startB, k - mid);
        }
        if (A[startA + mid] > B[startB + mid]) {//B的前一半不够，所以不要前一半了
            return helper(A, startA, B, startB + mid, k - mid);
        } else {
            return helper(A, startA + mid, B, startB, k - mid);
        }
    }
}

39. Recover Rotated Sorted Array
public class Solution {
    /*
     * @param nums: An integer array
     * @return: nothing
     */
    private void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {//for循环同时控制两个变量
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }

    public void recoverRotatedSortedArray(List<Integer> nums) {
        for (int index = 0; index < nums.size() - 1; index++) {
            if (nums.get(index) > nums.get(index + 1)) {
                reverse(nums, 0, index);//三步反转法，很常见，是一种思路
                reverse(nums, index + 1, nums.size() - 1);
                reverse(nums, 0, nums.size() - 1);
                return;
            }
        }
    }
}

8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if(str == null || str.length == 0){
            return;
        }
        offset = offset % str.length;//依旧是三段反转
        reverse(str, 0, str.length - offset -1);
        reverse(str, str.length - offset, str.length - 1);
        reverse(str, 0, str.length - 1);
    }
    private void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}

53. Reverse Words in a String 
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return "";
        }
        String [] array = s.split(" ");//字符串数组，包括很多字符串
        StringBuilder sb = new StringBuilder();
        for(int i = array.length - 1; i >= 0; i--){
            if(!array[i].equals("")){
                sb.append(array[i]).append(" ");
            }
        }
        //sb maybe empty if s only have space.
        //when new string show up, we should consider the extreme situation
        return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
    }
}
