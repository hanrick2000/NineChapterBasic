动态规划最重要的就是记住四要素
*状态 dp[]...
*方程 dp[i] = dp[i + 1]...
*初始化 dp[0] or dp[n]..
*答案 dp[0] or dp[n]..
109. Triangle
public class Solution {
    /**
     * @param triangle: a list of lists of integers
     * @return: An integer, minimum path sum
     */
    public int minimumTotal(int[][] triangle) {
        // write your code here
        if (triangle == null || triangle .length == 0|| triangle[0].length == 0) {
            return 0;
        }
        int m = triangle.length;
        int n = triangle[m - 1].length;
        int[][] dp = new int[m][n];
        
        //initialize
        for (int j = 0; j < n; j++) {
            dp[m - 1][j] = triangle[m - 1][j];
        }
        
        //formula
        for (int i = m - 2; i >= 0; i--) {
            for (int j = 0; j < triangle[i].length; j++) {
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j];
            }
        }
        
        return dp[0][0];
    }
}

110. Minimum Path Sum
public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int n = grid.length;
        int m = grid[0].length;
        //state
        int[][] dp = new int[n][m];
        
        //initialize
        dp[0][0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        
        for (int j = 1; j < m; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        
        //formula
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        //result
        return dp[n - 1][m - 1];
    }
}
