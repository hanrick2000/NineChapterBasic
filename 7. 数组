39. Recover Rotated Sorted Array
//三步反转法，很常见的方法，需要记住
public class Solution {
    /*
     * @param nums: An integer array
     * @return: nothing
     */
    private void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {//for循环同时控制两个变量
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }

    public void recoverRotatedSortedArray(List<Integer> nums) {
        for (int index = 0; index < nums.size() - 1; index++) {
            if (nums.get(index) > nums.get(index + 1)) {
                reverse(nums, 0, index);//三步反转法，很常见，是一种思路
                reverse(nums, index + 1, nums.size() - 1);
                reverse(nums, 0, nums.size() - 1);
                return;
            }
        }
    }
}

8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if(str == null || str.length == 0){
            return;
        }
        offset = offset % str.length;
        reverse(str, 0, str.length - offset -1);
        reverse(str, str.length - offset, str.length - 1);
        reverse(str, 0, str.length - 1);
    }
    private void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}

53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return "";
        }
        String [] array = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for(int i = array.length - 1; i >= 0; i--){
            if(!array[i].equals("")){
                sb.append(array[i]);
                sb.append(" ");
            }
        }
        //sb maybe empty if s only have space.
        //when new string show up, we should consider the extreme situation
        return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
    }
}

64. Merge Sorted Array
public class Solution {
    /*
     * @param A: sorted integer array A which has m elements, but size of A is m+n
     * @param m: An integer
     * @param B: sorted integer array B which has n elements
     * @param n: An integer
     * @return: nothing
     */
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        // write your code here
        int i = m - 1;//in place不能从前的时候可以考虑从后，思维要活跃起来
        int j = n - 1;
        int index = m + n - 1;
        while(i >= 0 && j >= 0){
            if(A[i] > B[j]){
                A[index--] = A[i--];
            } else{
                A[index--] = B[j--];
            }
        }
        while(i >= 0){
            A[index--] = A[i--];
        }
        while(j >= 0){
            A[index--] = B[j--];
        }
    }
}

6. Merge Two Sorted Arrays 
public class Solution {
    /**
     * @param A: sorted integer array A
     * @param B: sorted integer array B
     * @return: A new sorted integer array
     */
    public int[] mergeSortedArray(int[] A, int[] B) {
        if (A == null || B == null) {
            return null;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        int [] res = new int[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        return res;
    }
}

65. Median of two Sorted Arrays
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return 0.0;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        double [] res = new double[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        
        if((m+n) % 2 == 0){
            return (res[(m + n) / 2] + res[(m + n) / 2 - 1]) / 2;
        } else{
            return res[(m + n) / 2];
        }
    }
}

149. Best Time to Buy and Sell Stock
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }

        int min = Integer.MAX_VALUE;  //just remember the smallest price
        int profit = 0;
        for (int i : prices) {//单层循环就可以解决的问题 不要用两层循环
            min = i < min ? i : min;
            profit = (i - min) > profit ? i - min : profit;
        }

        return profit;
    }
}

150. Best Time to Buy and Sell Stock II
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        if(prices == null || prices.length == 0){
            return 0;
        }
        //greedy
        int profit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            int diff = prices[i+1] - prices[i];
            if (diff > 0) {
                profit += diff;
            }
        }
        return profit;
    }
}

151. Best Time to Buy and Sell Stock III
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        if(prices == null || prices.length ==0){
            return 0;
        }
        
        int [] left = new int[prices.length];
        int [] right = new int[prices.length];
        //寻找一条分割线，左边找一次利润最大值，右边找一次利润最大值，左右寻找方式和I 相似
        int min = prices[0];
        left[0] = 0;
        for(int i = 1; i < prices.length; i++){
            min = Math.min(prices[i], min);
            left[i] = Math.max(left[i - 1], prices[i] - min); 
         }
         
        right[prices.length - 1] = 0;
        int max = prices[prices.length - 1];
        for (int i = prices.length - 2; i >= 0; i--) {
            max = Math.max(prices[i], max);
            right[i] = Math.max(right[i + 1], max - prices[i]);
        }

        int profit = 0;
        for (int i = 0; i < prices.length; i++){
            profit = Math.max(left[i] + right[i], profit);  
        }
        return profit;
    }
}

393. Best Time to Buy and Sell Stock IV 
class Solution {
    /**
     * @param k: An integer
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int k, int[] prices) {
        // write your code here
        if (k == 0) {
            return 0;
        }
        if (k >= prices.length / 2) {
            int profit = 0;
            for (int i = 1; i < prices.length; i++) {
                if (prices[i] > prices[i - 1]) {
                    profit += prices[i] - prices[i - 1];
                }
            }
            return profit;
        }
        int n = prices.length;
        int[][] mustsell = new int[n + 1][n + 1];   // mustSell[i][j] 表示前i天，至多进行j次交易，第i天必须sell的最大获益
        int[][] globalbest = new int[n + 1][n + 1];  // globalbest[i][j] 表示前i天，至多进行j次交易，第i天可以不sell的最大获益
        
        mustsell[0][0] = globalbest[0][0] = 0;
        for (int i = 1; i <= k; i++) {
            mustsell[0][i] = globalbest[0][i] = 0;
        }
        
        for (int i = 1; i < n; i++) {
            int gainorlose = prices[i] - prices[i - 1];
            mustsell[i][0] = 0;
            for (int j = 1; j <= k; j++) {
                /*global[i][j] = max(local[i][j], global[i-1][j]) 
上述方程比较两个量的大小：①当前局部最大值；②过往全局最大值。 
local[i][j] = max(global[i-1][j-1] + max(diff, 0), local[i-1][j] + diff) 
上述方程比较两个量的大小： 
①全局到i-1天进行j-1次交易，然后加上今天的交易（如果今天的交易赚钱的话）。 
②取局部第i-1天进行j次交易，然后加上今天的差值（local[i-1][j]是第i-1天卖出的交易，它加上diff后变成第i天卖出，并不会增加交易次数。无论diff是正还是负都要加上，否则就不满足local[i][j]必须在最后一天卖出的条件了）*/
                mustsell[i][j] = Math.max(globalbest[(i - 1)][j - 1] + Math.max(gainorlose, 0), 
                                            mustsell[(i - 1)][j] + gainorlose);
                globalbest[i][j] = Math.max(globalbest[(i - 1)][j], mustsell[i ][j]);
            }
        }
        return globalbest[(n - 1)][k];
    }
}
