39. Recover Rotated Sorted Array
public class Solution {
    /**
     * @param nums: An integer array
     * @return: nothing
     */
    public void recoverRotatedSortedArray(List<Integer> nums) {
        // write your code here
        if (nums == null || nums.size() == 0) {
            return;
        }
        
        int index = 0;
        
        for (int i = 1; i < nums.size(); i++) {
            if (nums.get(i) < nums.get(i - 1)) {
                index = i;
                break;
            }
        }
        
        reverse(nums, 0, index - 1);
        reverse(nums, index, nums.size() - 1);
        reverse(nums, 0, nums.size() - 1);
    }
    
    public void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            Integer temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }
}

8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if (str == null || str.length == 0) {
            return;
        }
        
        offset = offset % str.length;//in case out of bound
        int length = str.length;
        
        reverse(str, 0, length - offset - 1);
        reverse(str, length - offset, length - 1);
        reverse(str, 0, length -1);
    }
    
    public void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}

*******************
只需要注意一点，去掉多个字符，可以考虑用正则表达式
53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if (s == null || s.length() == 0) {
            return "";
        }
        
        // String[] strs = s.split("\\s+");
        String[] strs = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = strs.length - 1; i >= 0; i--) {
            if (!strs[i].equals("")) {
                sb.append(strs[i]);
                sb.append(" ");
            }
        }
        
        return sb.toString();
    }
}

64. Merge Sorted Array
public class Solution {
    /*
     * @param A: sorted integer array A which has m elements, but size of A is m+n
     * @param m: An integer
     * @param B: sorted integer array B which has n elements
     * @param n: An integer
     * @return: nothing
     */
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        // write your code here
        if (m == 0 && n == 0) {
            return;
        }
        
        int index = m + n - 1;
        int i = m - 1;
        int j = n - 1;
        
        while (i >= 0 && j >= 0) {
            if (A[i] > B[j]) {
                A[index--] = A[i--];
            } else {
                A[index--] = B[j--];
            }
        }
        
        while(i >= 0){
            A[index--] = A[i--];
        }
        while(j >= 0){
            A[index--] = B[j--];
        }
    }
}

6. Merge Two Sorted Arrays
public class Solution {
    /**
     * @param A: sorted integer array A
     * @param B: sorted integer array B
     * @return: A new sorted integer array
     */
    public int[] mergeSortedArray(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return null;
        }
        
        int m = A.length;
        int n = B.length;
        
        int[] res = new int[m + n];
        
        int index = 0;
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (A[i] < B[j]) {
                res[index++] = A[i++];
            } else {
                res[index++] = B[j++];
            }
        }
        
        while (i < m) {
            res[index++] = A[i++];
        }
        
        while (j < n) {
            res[index++] = B[j++];
        }
        return res;
    }
}
