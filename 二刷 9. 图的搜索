得了吧，这一章基本都没写出来，多来几遍吧，递归还挺重要的
137. Clone Graph
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */


public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null) {
            return node;
        }
        //use map to store all the nodes
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        
        UndirectedGraphNode newNode = new UndirectedGraphNode(node.label);
        map.put(node, newNode);
        queue.offer(node);
        
        while (!queue.isEmpty()) {
            UndirectedGraphNode top = queue.poll();
            List<UndirectedGraphNode> neighbors = top.neighbors;
            for (UndirectedGraphNode neighbor : neighbors) {
                if (!map.containsKey(neighbor)) {
                    map.put(neighbor, new UndirectedGraphNode(neighbor.label));
                    queue.offer(neighbor);
                }
                
                map.get(top).neighbors.add(map.get(neighbor));
            }
        }
        return newNode;
    }
}

105. Copy List with Random Pointer
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        
        if (head == null) {// edge case
            return null;
        }
        
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode dummy = new RandomListNode(0);
        dummy.next = head;
        //copy nodes
        while (head != null) {
            map.put(head, new RandomListNode(head.label));
            head = head.next;
        }
        head = dummy.next;
        //copy links
        while (head != null) {
            map.get(head).next = map.get(head.next);
            map.get(head).random = map.get(head.random);
            head = head.next;
        }
        
        return map.get(dummy.next);
    }
}

没写出来，要考虑入度
127. Topological Sorting
/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        if (graph == null) {
            return null;
        }
        
        ArrayList<DirectedGraphNode> res = new ArrayList<>();
        Map<DirectedGraphNode, Integer> map = new HashMap<>();
        Queue<DirectedGraphNode> queue = new LinkedList<>();
        
        //count the in degree
        for (DirectedGraphNode node : graph) {
            for (DirectedGraphNode neighbor : node.neighbors) {
                if (map.containsKey(neighbor)) {
                    map.put(neighbor, map.get(neighbor) + 1);
                } else {
                    map.put(neighbor, 1);
                }
            }
        }
        
        //add in degree  equal to 0 into result
        for (DirectedGraphNode node : graph) {
            if (!map.containsKey(node)) {
                res.add(node);
                queue.offer(node);
            }
        }
        
        //add whose in degree == 0 in sequence
        while (!queue.isEmpty()) {
            DirectedGraphNode temp = queue.poll();
            for (DirectedGraphNode neighbor : temp.neighbors) {
                map.put(neighbor, map.get(neighbor) - 1);
                if (map.get(neighbor) == 0) {
                    res.add(neighbor);
                    queue.add(neighbor);
                } 
            }
        } 
        return res;
    }
}

//写错了，为什么呢？因为总是想着下次递归进去start+1，这样会忽视一种情况就是0, 1 和1, 0。所以必须每次都从0
注意看看时间复杂度和subset对比
递归层数为n
每层循环n
时间复杂度O(n^n)
15. Permutations
public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        
        if(nums == null){
            return res;
        }
        if(nums.length == 0){
            res.add(new ArrayList<Integer>());
            return res;
        }
        List<Integer> temp = new ArrayList<Integer>();
        dfs(res, nums, temp);
        return res;
    }
    public void dfs(List<List<Integer>> res, int[] nums, List<Integer>temp){
        if(temp.size() == nums.length){
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if (temp.contains(nums[i])) {// make sure next loop won't add same number
                continue;
            }
            temp.add(nums[i]);
            dfs(res, nums, temp);
            temp.remove(temp.size() - 1);
        }
        return;// void函数隐式存在return
    }
}

求子集，时间复杂度O(2^n) 决策树 画出来就知道了 也可以归纳总结 solve n = 1需要2， solve n = 2需要4
注意传值和传参的区别
res.add(new ArrayList<Integer>(list)); 
            //注意不能用res.add(list) 因为java是pass by value，所以在不停的copy同一个对象的reference
            //但是这个对象最后是空，所有的reference指向同一个对象。而这个对象最后为空，所以全是空。
            //但是如果在这中间过程中, new了一个新对象，那么传进去的是新对象的reference，相当于把改变的过程每次都copy一份保存了起来
            http://www.importnew.com/3559.html
17. Subsets
public class Solution {
    /**
     * @param nums: A set of numbers
     * @return: A list of lists
     */
    public List<List<Integer>> subsets(int[] nums) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        
        if (nums == null) {
            return res;
        }
        
        if (nums.length == 0) {
            res.add(new ArrayList<>());
            return res;
        }
        
        Arrays.sort(nums);
        int length = 0;
        int start = 0;
        List<Integer> list = new ArrayList<>();
        dfs(nums, res, list, length, start);
        return res;
    }
    
    public void dfs(int[] nums, List<List<Integer>> res, List<Integer> list, int length, int start) {
        if (list.size() == length) {
            res.add(new ArrayList<Integer>(list)); 
            //注意不能用res.add(list) 因为java是pass by value，所以在不停的copy同一个对象的reference
            //但是这个对象最后是空，所有的reference指向同一个对象。而这个对象最后为空，所以全是空。
            //但是如果在这中间过程中, new了一个新对象，那么传进去的是新对象的reference，相当于把改变的过程每次都copy一份保存了起来
            //比如说你在main函数list中添加一个值，那么最后输出永远都是这个值
        }
        
        for(int i = start; i < nums.length; i++){
            list.add(nums[i]);
            dfs(nums, res, list, length + 1, i + 1);
            list.remove(list.size() - 1);
            
        }
    }
}


33. N-Queens
public class Solution {
    /*
     * @param n: The number of queens
     * @return: All distinct solutions
     */
    public List<List<String>> solveNQueens(int n) {
        // write your code here
        List<List<String>> res = new ArrayList<>();
        if (n <= 0) {
            return null;
        }
        //index represents row; value represents the cloumn, where you place the queen
        int[] colVal = new int[n];
        dfs(n, res, 0, colVal);
        return res;
    }
    
    public void dfs(int n, List<List<String>> res, int row, int[] colVal) {
        if (row == n) {
            List<String> unit = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < n; j++) {
                    if (colVal[i] == j) {
                        sb.append('Q');
                    } else {
                        sb.append('.');
                    }
                }
                unit.add(sb.toString());
            }
            res.add(unit);
            return;
        }
        
        //遍历所有的情况，一次把皇后放在所有的列
        for (int i = 0; i < n; i++) {
            colVal[row] = i;
            if(isValid(row, colVal)) {
                dfs(n, res, row + 1, colVal);
            }
        }
    }
    
    public boolean isValid(int row, int[] colVal) {
        for (int i = 0; i < row; i++) {
            if (colVal[i] == colVal[row] || Math.abs(colVal[i] - colVal[row]) == row - i) {
                return false;
            }
        }
        return true;
    }
}


18. Subsets II
public class Solution {
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        
        if (nums == null) {
            return res;
        }
        
        if (nums.length == 0) {
            res.add(new ArrayList<>());
            return res;
        }
        
        Arrays.sort(nums);
        int length = 0;
        int start = 0;
        List<Integer> list = new ArrayList<>();
        dfs(nums, res, list, length, start);
        return res;
    }
    
    public void dfs(int[] nums, List<List<Integer>> res, List<Integer> list, int length, int start) {
        if (list.size() == length) {
            res.add(new ArrayList<Integer>(list)); 
        }
        
        for(int i = start; i < nums.length; i++){
            if(i != start && nums[i] == nums[i - 1]){
                continue;
            }
            list.add(nums[i]);
            dfs(nums, res, list, length + 1, i + 1);
            list.remove(list.size() - 1);
            
        }
    }
}

136. Palindrome Partitioning
public class Solution {
    /*
     * @param s: A string
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
        // write your code here
        List<List<String>> res = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return res;
        }
        
        List<String> unit = new ArrayList<>();
        dfs(s, 0, res, unit);
        return res;
    }
    
    public void dfs(String s, int start, List<List<String>> res, List<String> unit) {
        if (start == s.length()) {
            res.add(new ArrayList<>(unit));
            return;//这个和subset不同在于，subsets的length是在递增 不一定能到最长，所以不能return，return会造成只有一个结果。
        }
        
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (isValid(sub)) {
                unit.add(sub);
                dfs(s, i + 1, res, unit);
                unit.remove(unit.size() - 1);
            }
        }
    }
    
    public boolean isValid(String s) {
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
        }
        return true;
    }
}


135. Combination Sum
public class Solution {
    public  List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (candidates == null) {
            return result;
        }

        List<Integer> combination = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, 0, target, combination, result);

        return result;
    }

     void helper(int[] candidates,
                 int index,
                 int target,
                 List<Integer> combination,
                 List<List<Integer>> result) {
        if (target < 0) {
            return;
        }
        
        if (target == 0) {
            result.add(new ArrayList<Integer>(combination));
            return;
        }

        for (int i = index; i < candidates.length; i++) {
            if (i != 0 && candidates[i] == candidates[i - 1]) {
                continue;
            }
            combination.add(candidates[i]);
            helper(candidates, i, target - candidates[i], combination, result);
            combination.remove(combination.size() - 1);
        }
    }
}

