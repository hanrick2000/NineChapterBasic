这道题无关乎算法，而是这种思路的设计值得多写几遍

12. Min Stack
public class MinStack {
    private Stack<Integer> stack = new Stack<>();
    private Stack<Integer> minStack = new Stack<>();
    
    public MinStack() {
        // do intialization if necessary
    }

    /*
     * @param number: An integer
     * @return: nothing
     */
    public void push(int number) {
        // write your code here
        stack.push(number);
        if (minStack.isEmpty()) {
            minStack.push(number);
        } else {
            if (minStack.peek() >= number) {// 这里考虑的相等的情况也会继续push
                minStack.push(number);
            }
        }
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if (stack.peek().equals(minStack.peek())) {//两个栈顶的元素相同，如果要pop，最小栈也要pop，因为这个元素已经删除了，所以也要从最小栈删除
            minStack.pop();
        }
        return stack.pop();
    }

    /*
     * @return: An integer
     */
    public int min() {
        // write your code here
        return minStack.peek();
    }
}

40. Implement Queue by Two Stacks
二刷：两个stacks来回倒腾数据，每次push都要保证把第二个stack里面的数据先加入到stack1中去，然后再加入数据，
这样可以保证pop和top时候从stack1中加入到stack2的顺序性，但是有很多的重复的操作，不如一刷好。
public class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;
    
    public MyQueue() {
        // do intialization if necessary
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        while (!stack2.isEmpty()) {
            stack1.push(stack2.pop());
        }
        stack1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
        return stack2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
        return stack2.peek();
    }
}

一刷：
拿一个stack1永远作为push 的stack，当stack2为空的时候，说明stack2没有元素可以pop或者top了，
就把stack1中的元素都加进去，可以减少很多不必要的倒腾
public class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;
    
    public MyQueue() {
        // do intialization if necessary
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        stack1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }
}
********************************
这一类的用高度求面积或者盛水的可以考虑用递增或者递减栈来维护
122. Largest Rectangle in Histogram
public class Solution {
    /**
     * @param height: A list of integer
     * @return: The area of largest rectangle in the histogram
     */
    public int largestRectangleArea(int[] height) {
        // write your code here
        int max = 0;
        if (height == null || height.length == 0) {
            return max;
        }
        
        Stack<Integer> stack = new Stack<>();//maintain an increment Stack
        for (int i = 0; i <= height.length; i++) {
            int curt = (i == height.length) ? -1 : height[i];
            while (!stack.isEmpty() && curt <= height[stack.peek()]) {
                int h = height[stack.pop()];
                int w = stack.isEmpty() ? i : i - stack.peek() - 1;
                max = Math.max(max, h * w);
            }
            stack.push(i);
        }
        
        return max;
    }
}

126. Max Tree
Given an integer array with no duplicates. A max tree building on this array is defined as follow:
- The root is the maximum number in the array. 
- The left subtree and right subtree are the max trees of the subarray divided by the root number. 
- Construct the max tree by the given array.

Example 
Given [2, 5, 6, 0, 3, 1], the max tree constructed by this array is:
    6
   / \
  5   3
 /   / \
2   0   1

Challenge 
O(n) time and memory.
//其实就是笛卡尔数，满足两个性质
树中的元素满足二叉搜索树性质，要求按照中序遍历得到的序列为原数组序列
树中节点满足堆性质，节点的key值要大于其左右子节点的key值

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param A: Given an integer array with no duplicates.
     * @return: The root of max tree.
     */
    public TreeNode maxTree(int[] A) {
        if (A == null || A.length == 0) {
            return null;
        }
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        for (int i = 0; i < A.length; i++) {
            TreeNode curt = new TreeNode(A[i]);
            // use while to find the max left node of curt
            while (!stack.isEmpty() && curt.val > stack.peek().val) {
                curt.left = stack.pop(); //根据BST性质，之前放进去的应该放在当前点的左边
            }
            if (!stack.isEmpty()) { //将push进去的点作为右子树和之前的点连接起来
                stack.peek().right = curt;//因为要满足BST的性质，所以后加进去的点都放在右边
            }
            stack.push(curt);
        }
        TreeNode result = new TreeNode(0);
        while (!stack.isEmpty()) {
            result = stack.pop();
        }
        return result;
    }
}

这道题多写几遍吧下次
129. Rehashing
//注意观察这道题的输入输出，万变不离其宗，依照java原来的数据结构来输出
import java.util.*;

class ListNode {
  int val;
  ListNode next;
  ListNode(int x) {
      this.val = x;
      this.next = null;
  }
}
class Solution {
    /**
     * @param hashTable: A list of The first node of linked list
     * @return: A list of The first node of linked list which have twice size
     */
    public ListNode[] rehashing(ListNode[] hashTable) {
        // write your code here
        if (hashTable.length <= 0) {
            return hashTable;
        }
        int newcapacity = 2 * hashTable.length;
        ListNode[] newTable = new ListNode[newcapacity];
        for (int i = 0; i < hashTable.length; i++) {
            while (hashTable[i] != null) {
                int newindex = (hashTable[i].val % newcapacity + newcapacity) % newcapacity;
                if (newTable[newindex] == null) {
                    newTable[newindex] = new ListNode(hashTable[i].val);
                   // newTable[newindex].next = null;
                } else {
                    ListNode dummy = newTable[newindex];
                    while (dummy.next != null) {
                        dummy = dummy.next;
                    }
                    dummy.next = new ListNode(hashTable[i].val);
                }
                hashTable[i] = hashTable[i].next;
            }
        }
        
        //System.out.println(newTable[1].val);
        
        return newTable;
    }
}


这道题写不出来是正常的-。-
doubly linked list + hashmap

134. LRU Cache
public class LRUCache {
    /*
    * @param capacity: An integer
    */
    class Node {
        int key;
        int value;
        Node next;
        Node pre;
        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
    int capacity;
    Map<Integer, Node> map = new HashMap<>();
    Node head = null;
    Node end = null;
    
    public LRUCache(int capacity) {
        // do intialization if necessary
        this.capacity =capacity;
    }

    /*
     * @param key: An integer
     * @return: An integer
     */
    public int get(int key) {
        // write your code here
        if (map.containsKey(key)) {
            Node n = map.get(key);
            remove(n);
            setHead(n);//latest visited always put in the head
            return n.value;
        }
 
        return -1;
    }
    
    public void remove(Node n) {
        //n 是否是头结点
        if(n.pre != null) {
            n.pre.next = n.next;
        } else {
            head = n.next;
        }
        //n 是否是尾结点
        if(n.next != null) {
            n.next.pre = n.pre;
        } else {
            end = n.pre;
        }
    }
    
    public void setHead(Node n) {
        n.next = head;
        n.pre = null;
        
        if(head != null)
            head.pre = n;//将原来的头结点和当前点连接起来
 
        head = n;

        if(end == null)//没有元素
            end = head;
    }
    /*
     * @param key: An integer
     * @param value: An integer
     * @return: nothing
     */
    public void set(int key, int value) {
        // write your code here
        if (map.containsKey(key)) {
            Node old = map.get(key);
            old.value = value;
            remove(old);
            setHead(old);
        } else {
            Node created = new Node(key, value);
            if (map.size() >= capacity) {
                map.remove(end.key); //key放在node里面的原因
                remove(end);
                setHead(created);
            } else {
                setHead(created);
            }    
            map.put(key, created);
        }
        
    }
}


124. Longest Consecutive Sequence
class Solution {
    /**
     * @param nums: A list of integers
     * @return an integer
     */
    public int longestConsecutive(int[] num) {
        // write you code here
        Set<Integer> set = new HashSet<>();//set will sort the nums automatically and with O(n) time.
        //total time complixity O(n);
        for (int item : num) {
            set.add(item);
        }

        int ans = 0;
        for (int item : num) {
            if (set.contains(item)) {
                set.remove(item);

                int l = item - 1;
                int r = item + 1;
                while (set.contains(l)) {
                    set.remove(l);
                    l--;
                }
                while (set.contains(r)) {
                    set.remove(r);
                    r++;
                }
                ans = Math.max(ans, r - l - 1);
            }
        }
        return ans;
    }
}

138. Subarray Sum
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> subarraySum(int[] nums) {
        // write your code here
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        int sum = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(sum, -1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum)) {
                res.add(map.get(sum) + 1);
                res.add(i);
                return res;
            } else {
                map.put(sum, i);
            }
        }
        return res;
    }
}

105. Copy List with Random Pointer
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if (head == null) {
            return head;
        }
        
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode dummy = new RandomListNode(0);
        dummy.next = head;
        
        //copy node
        while (head != null) {
            map.put(head, new RandomListNode(head.label));
            head = head.next;
        }
        head = dummy.next;
        //copy links
        while (head != null) {
            map.get(head).next = map.get(head.next);
            map.get(head).random = map.get(head.random);
            head = head.next;
        }
        return map.get(dummy.next);
        
    }
}
**********************************
遍历map的key value的方法
/*public static void main(String[] args) {


  Map<String, String> map = new HashMap<String, String>();
  map.put("1", "value1");
  map.put("2", "value2");
  map.put("3", "value3");
  
  //第一种：普遍使用，二次取值
  System.out.println("通过Map.keySet遍历key和value：");
  for (String key : map.keySet()) {
   System.out.println("key= "+ key + " and value= " + map.get(key));
  }
  
  //第二种
  System.out.println("通过Map.entrySet使用iterator遍历key和value：");
  Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
  while (it.hasNext()) {
   Map.Entry<String, String> entry = it.next();
   System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
  }
  
  //第三种：推荐，尤其是容量大时
  System.out.println("通过Map.entrySet遍历key和value");
  for (Map.Entry<String, String> entry : map.entrySet()) {
   System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
  }

  //第四种
  System.out.println("通过Map.values()遍历所有的value，但不能遍历key");
  for (String v : map.values()) {
   System.out.println("value= " + v);
  }
 }
 */
题目并不是很难，但是用到了容器里面的一些方法，所以还是值得再写写的
add是将传入的参数作为当前List中的一个Item存储，即使你传入一个List也只会另当前的List增加1个元素
addAll是传入一个List，将此List中的所有元素加入到当前List中，也就是当前List会增加的元素个数为传入的List的大小
171. Anagrams
public class Solution {
    /**
     * @param strs: A list of strings
     * @return: A list of strings
     */
    public List<String> anagrams(String[] strs) {
        // write your code here
        List<String> res = new ArrayList<>();
        if (strs == null || strs.length == 0) {
            return res;
        }
        
        Map<String, List<String>> map = new HashMap<>();
        for (String str : strs) {
            char[] ch = str.toCharArray();
            Arrays.sort(ch);
            String s = String.valueOf(ch);
            if (!map.containsKey(s)) {
                map.put(s, new ArrayList<>());
            }
            map.get(s).add(str);
        }
        
        for (String key : map.keySet()) {
            if (map.get(key).size() >= 2)
                res.addAll(map.get(key));
        }
        
        return res;
    }
}

没写出来，so sad
81. Data Stream Median
 //TLE
 public class Solution {
    /**
     * @param nums: A list of integers
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if(nums == null || nums.length ==0){
            return null;
        }
        
        int[] res = new int[nums.length];
        int i = 1;//current numbers in array 
        while(i <= nums.length){
            int[] copy = new int[i];
            for(int j=0;j<i; j++){
                copy[j] = nums[j];
            }
            Arrays.sort(copy);
            res[i - 1] = copy[(i - 1) / 2];
            i++;
        }
        //Arrays.sort(nums);
        //res[nums.length - 1] = nums[(nums.length - 1) / 2];
        return res;
    }
}

//nlogn version
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: the median of numbers
     */
    PriorityQueue<Integer> maxpq;
    PriorityQueue<Integer> minpq;
    public int[] medianII(int[] nums) {
        // write your code here
        minpq = new PriorityQueue<>(nums.length);
        maxpq = new PriorityQueue<>(nums.length, new Comparator<Integer>(){
        public int compare(Integer a, Integer b){
                return b - a;
            }
        });
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            maxpq.offer(nums[i]);
            if(maxpq.size() > minpq.size()){
                minpq.offer(maxpq.poll());
            }

            if(minpq.size() > maxpq.size()){
                maxpq.offer(minpq.poll());
            }
            result[i] = maxpq.peek();
        }
        return result;
    }
}


130. Heapify
/*思路是从底部开始构建数组，将较小的结点移向上层结点。先取数组末尾的两个元素为left和right，
若2*i+1和2*i+2越界，则赋Integer.MAX_VALUE，这样可以在后面的分支语句避免对越界情况不必要的讨论。
然后，取left和right的较小者和上层A[i]结点交换，实现min-heap结构。交换了A[i]和A[2*i+1]/A[2*i+2]之后，
还要重新heapify被交换到末位的原先的A[i]，即交换之后的A[2*i+1]/A[2*i+2]。然后i不断减小，直到整个数组完成heapify。*/
public class Solution {
    public void heapify(int[] A) {
        for (int i = A.length/2; i >= 0; i--) {//前一半已经可以到达数组的末尾了
            helper(A, i);
        }
    }
    public void helper(int[] A, int i) {
        if (i > A.length) return;
        int left = 2 * i + 1 < A.length ? A[2 * i + 1] : Integer.MAX_VALUE;
        int right = 2 * i + 2 < A.length ? A[2 * i + 2] : Integer.MAX_VALUE;
        if (left < right && left < A[i]) {//左节点更小，把左节点和当前点交换
            A[2 * i + 1] = A[i];
            A[i] = left;
            helper(A, 2 * i + 1);//交换过以后再把后面的节点重新heapify，因为有可能不成立了。
        }
        else if (left >= right && right < A[i]) {
            A[2 * i + 2] = A[i];
            A[i] = right;
            helper(A, 2 * i + 2);
        }
        return;
    }
}


104. Merge K Sorted Lists
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    public ListNode mergeKLists(List<ListNode> lists) {  
        // write your code here
        if (lists == null || lists.size() == 0) {
            return null;
        }
        
        return mergeKListsHelper(lists, 0, lists.size() - 1);
    }
    
    public ListNode mergeKListsHelper(List<ListNode> lists, int start, int end) {
        if (start == end) {
            return lists.get(start);
        }
        
        int mid = start + (end - start) / 2;
        
        ListNode left = mergeKListsHelper(lists, start, mid);
        ListNode right = mergeKListsHelper(lists, mid + 1, end);
        
        return mergeTwoLists(left, right);
    }
    
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                head.next = list1;
                list1 = list1.next;
            } else {
                head.next = list2;
                list2 = list2.next;
            }
            head = head.next;
        }
        
        if (list1 != null) {
            head.next = list1;
        } else {
            head.next = list2;
        }
        
        return dummy.next;
    }
}
