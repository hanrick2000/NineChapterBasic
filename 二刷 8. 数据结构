这道题无关乎算法，而是这种思路的设计值得多写几遍

12. Min Stack
public class MinStack {
    private Stack<Integer> stack = new Stack<>();
    private Stack<Integer> minStack = new Stack<>();
    
    public MinStack() {
        // do intialization if necessary
    }

    /*
     * @param number: An integer
     * @return: nothing
     */
    public void push(int number) {
        // write your code here
        stack.push(number);
        if (minStack.isEmpty()) {
            minStack.push(number);
        } else {
            if (minStack.peek() >= number) {// 这里考虑的相等的情况也会继续push
                minStack.push(number);
            }
        }
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if (stack.peek().equals(minStack.peek())) {//两个栈顶的元素相同，如果要pop，最小栈也要pop，因为这个元素已经删除了，所以也要从最小栈删除
            minStack.pop();
        }
        return stack.pop();
    }

    /*
     * @return: An integer
     */
    public int min() {
        // write your code here
        return minStack.peek();
    }
}

40. Implement Queue by Two Stacks
二刷：两个stacks来回倒腾数据，每次push都要保证把第二个stack里面的数据先加入到stack1中去，然后再加入数据，
这样可以保证pop和top时候从stack1中加入到stack2的顺序性，但是有很多的重复的操作，不如一刷好。
public class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;
    
    public MyQueue() {
        // do intialization if necessary
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        while (!stack2.isEmpty()) {
            stack1.push(stack2.pop());
        }
        stack1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
        return stack2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
        return stack2.peek();
    }
}

一刷：
拿一个stack1永远作为push 的stack，当stack2为空的时候，说明stack2没有元素可以pop或者top了，
就把stack1中的元素都加进去，可以减少很多不必要的倒腾
public class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;
    
    public MyQueue() {
        // do intialization if necessary
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        stack1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }
}
********************************
这一类的用高度求面积或者盛水的可以考虑用递增或者递减栈来维护
122. Largest Rectangle in Histogram
public class Solution {
    /**
     * @param height: A list of integer
     * @return: The area of largest rectangle in the histogram
     */
    public int largestRectangleArea(int[] height) {
        // write your code here
        int max = 0;
        if (height == null || height.length == 0) {
            return max;
        }
        
        Stack<Integer> stack = new Stack<>();//maintain an increment Stack
        for (int i = 0; i <= height.length; i++) {
            int curt = (i == height.length) ? -1 : height[i];
            while (!stack.isEmpty() && curt <= height[stack.peek()]) {
                int h = height[stack.pop()];
                int w = stack.isEmpty() ? i : i - stack.peek() - 1;
                max = Math.max(max, h * w);
            }
            stack.push(i);
        }
        
        return max;
    }
}

126. Max Tree
Given an integer array with no duplicates. A max tree building on this array is defined as follow:
- The root is the maximum number in the array. 
- The left subtree and right subtree are the max trees of the subarray divided by the root number. 
- Construct the max tree by the given array.

Example 
Given [2, 5, 6, 0, 3, 1], the max tree constructed by this array is:
    6
   / \
  5   3
 /   / \
2   0   1

Challenge 
O(n) time and memory.
//其实就是笛卡尔数，满足两个性质
树中的元素满足二叉搜索树性质，要求按照中序遍历得到的序列为原数组序列
树中节点满足堆性质，节点的key值要大于其左右子节点的key值

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param A: Given an integer array with no duplicates.
     * @return: The root of max tree.
     */
    public TreeNode maxTree(int[] A) {
        if (A == null || A.length == 0) {
            return null;
        }
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        for (int i = 0; i < A.length; i++) {
            TreeNode curt = new TreeNode(A[i]);
            // use while to find the max left node of curt
            while (!stack.isEmpty() && curt.val > stack.peek().val) {
                curt.left = stack.pop(); //根据BST性质，之前放进去的应该放在当前点的左边
            }
            if (!stack.isEmpty()) { //将push进去的点作为右子树和之前的点连接起来
                stack.peek().right = curt;//因为要满足BST的性质，所以后加进去的点都放在右边
            }
            stack.push(curt);
        }
        TreeNode result = new TreeNode(0);
        while (!stack.isEmpty()) {
            result = stack.pop();
        }
        return result;
    }
}

这道题多写几遍吧下次
129. Rehashing
//注意观察这道题的输入输出，万变不离其宗，依照java原来的数据结构来输出
import java.util.*;

class ListNode {
  int val;
  ListNode next;
  ListNode(int x) {
      this.val = x;
      this.next = null;
  }
}
class Solution {
    /**
     * @param hashTable: A list of The first node of linked list
     * @return: A list of The first node of linked list which have twice size
     */
    public ListNode[] rehashing(ListNode[] hashTable) {
        // write your code here
        if (hashTable.length <= 0) {
            return hashTable;
        }
        int newcapacity = 2 * hashTable.length;
        ListNode[] newTable = new ListNode[newcapacity];
        for (int i = 0; i < hashTable.length; i++) {
            while (hashTable[i] != null) {
                int newindex = (hashTable[i].val % newcapacity + newcapacity) % newcapacity;
                if (newTable[newindex] == null) {
                    newTable[newindex] = new ListNode(hashTable[i].val);
                   // newTable[newindex].next = null;
                } else {
                    ListNode dummy = newTable[newindex];
                    while (dummy.next != null) {
                        dummy = dummy.next;
                    }
                    dummy.next = new ListNode(hashTable[i].val);
                }
                hashTable[i] = hashTable[i].next;
            }
        }
        
        //System.out.println(newTable[1].val);
        
        return newTable;
    }
}
