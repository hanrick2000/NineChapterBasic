
******************************************

1.矩阵dp（坐标）
二维
一维
2.分割dp
*如果限制了切割子字符串的个数，需要二维
dp[i][j] 前i个字符，切成j个单词，是否可行
*如果没有限制
dp[i]
3.区间dp
i - j 二维
4.两个序列的dp
二维

多写几遍这道题目
特别是预处理的那一段，可以背下来
这道题是切割dp
108. Palindrome Partitioning II
public class Solution {
    /**
     * @param s: A string
     * @return: An integer
     */
     
    
    public int minCut(String s) {
        // write your code here
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        //state
        int[] dp = new int[s.length() + 1];//前i个字符至少切几刀为回文串
        boolean[][] isPalindrome = getIsPalindrome(s);//预处理，减少时间复杂度
        
        //initialize
        for (int i = 0; i <= s.length(); i++) {
            dp[i] = i - 1;
        }
        
        //function
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (isPalindrome[j][i - 1]) {//下标第j点到i - 1点为回文串，不能为i，因为字符串的最大下标为i - 1。
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[s.length()];
    }
    
    private boolean[][] getIsPalindrome(String s) {
        boolean[][] isPalindrome = new boolean[s.length()][s.length()];

        for (int i = 0; i < s.length(); i++) {
            isPalindrome[i][i] = true;
        }
        for (int i = 0; i < s.length() - 1; i++) {
            isPalindrome[i][i + 1] = (s.charAt(i) == s.charAt(i + 1));
        }
//(start (start+1                    i-1)    i)
        for (int i = 2; i < s.length(); i++) {//区间型动态规划，背下来。外层长度，内层起点
            for (int start = 0; start + i < s.length(); start++) {
                isPalindrome[start][start + i]
                    = isPalindrome[start + 1][start + i - 1] && s.charAt(start) == s.charAt(start + i);
            }
        }

        return isPalindrome;
    }
}

*************************
没写出来 sad
这道题很上面那道题一类，都是切分序列型的dp，所以状态转移方程都和之前某个状态有关
所以需要判断之前的状态是否成立，以及之前状态之后到当前状态是否也满足，就可以得出当前状态。
107. Word Break
public class Solution {
    /*
     * @param s: A string
     * @param dict: A dictionary of words dict
     * @return: A boolean
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here
        if (dict.isEmpty() && s.length() == 0) {  
            return true;
        }
        int maxlength = getMaxLength(dict);
        
        //state: 前i个单词是否能完美切分 
        boolean[] canbreak = new boolean[s.length() + 1];
        
        //initialize
        canbreak[0] = true;
        
        //function
        for (int i = 1; i < s.length() + 1; i++) {//substring后一个变量不包含，所以i可以到length
            for (int j = 0; j <= i && j <= maxlength; j++) { // j <= maxlength,切分长度大于最大的单词长度，那就没必要切分，因为肯定不在词典中
                //i - j 表示从 i 点开始往前j个点的位置
                String str = s.substring(i - j,i);
                //如果此str在词典中 并且 str之前的 字符串可以拆分     
                if(dict.contains(str) && canbreak[i - j]){
                  canbreak[i] = true;
                  break;
                }
            }
        }
        return canbreak[s.length()];
    }
    
    //这个函数如果写进主函数会超时
    private int getMaxLength(Set<String> dict){
        int max = 0;
        for(String s : dict){
            max = Math.max(max,s.length());
        }
        return max;
    }
}

77. Longest Common Subsequence
public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: The length of longest common subsequence of A and B
     */
    public int longestCommonSubsequence(String A, String B) {
        // write your code here
        if (A == null && B == null) {
            return 0;
        }
        int n = A.length();
        int m = B.length();
        
        //state: A的前i个和B的前j个所包含的LCS
        int[][] dp = new int[n + 1][m + 1];
        
        //initialize
        dp[0][0] = 0;
        
        //function
        //example
        //f[4][4] 和f[3][3] f[4][3] f[3][4]有关
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                //如果当前点相等，那么长度等于上次状态加上1
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {//如果当前点不同，则只有一个字符可以入围，A或者B，从里面选择一个最大的
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        //result
        return dp[n][m];
    }
}

这道题和上道题目几乎一样，只是相等的dp[4][4]只和dp[3][3]有关
79. Longest Common Substring
public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: the length of the longest common substring.
     */
    public int longestCommonSubstring(String A, String B) {
        // write your code here
        if (A == null && B == null) {
            return 0;
        }
        
        int n = A.length();
        int m = B.length();
        
        //state:A's frist i elements and B's first j elements LCS
        int[][] dp = new int[n + 1][m + 1];
        
        dp[0][0] = 0;
        
        //function
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        int max = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }
        return max;
    }
}
