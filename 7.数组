39. Recover Rotated Sorted Array
//三步反转法，很常见的方法，需要记住
public class Solution {
    /*
     * @param nums: An integer array
     * @return: nothing
     */
    private void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {//for循环同时控制两个变量
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }

    public void recoverRotatedSortedArray(List<Integer> nums) {
        for (int index = 0; index < nums.size() - 1; index++) {
            if (nums.get(index) > nums.get(index + 1)) {
                reverse(nums, 0, index);//三步反转法，很常见，是一种思路
                reverse(nums, index + 1, nums.size() - 1);
                reverse(nums, 0, nums.size() - 1);
                return;
            }
        }
    }
}

8. Rotate String
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if(str == null || str.length == 0){
            return;
        }
        offset = offset % str.length;
        reverse(str, 0, str.length - offset -1);
        reverse(str, str.length - offset, str.length - 1);
        reverse(str, 0, str.length - 1);
    }
    private void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}

53. Reverse Words in a String
public class Solution {
    /*
     * @param s: A string
     * @return: A string
     */
    public String reverseWords(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return "";
        }
        String [] array = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for(int i = array.length - 1; i >= 0; i--){
            if(!array[i].equals("")){
                sb.append(array[i]);
                sb.append(" ");
            }
        }
        //sb maybe empty if s only have space.
        //when new string show up, we should consider the extreme situation
        return sb.length() == 0 ? " " : sb.substring(0, sb.length() - 1);
    }
}

64. Merge Sorted Array
public class Solution {
    /*
     * @param A: sorted integer array A which has m elements, but size of A is m+n
     * @param m: An integer
     * @param B: sorted integer array B which has n elements
     * @param n: An integer
     * @return: nothing
     */
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        // write your code here
        int i = m - 1;//in place不能从前的时候可以考虑从后，思维要活跃起来
        int j = n - 1;
        int index = m + n - 1;
        while(i >= 0 && j >= 0){
            if(A[i] > B[j]){
                A[index--] = A[i--];
            } else{
                A[index--] = B[j--];
            }
        }
        while(i >= 0){
            A[index--] = A[i--];
        }
        while(j >= 0){
            A[index--] = B[j--];
        }
    }
}

6. Merge Two Sorted Arrays 
public class Solution {
    /**
     * @param A: sorted integer array A
     * @param B: sorted integer array B
     * @return: A new sorted integer array
     */
    public int[] mergeSortedArray(int[] A, int[] B) {
        if (A == null || B == null) {
            return null;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        int [] res = new int[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        return res;
    }
}

65. Median of two Sorted Arrays
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        if (A == null || B == null) {
            return 0.0;
        }
        
        int index = 0;
        int m = A.length;
        int n = B.length;
        double [] res = new double[m + n];
        int i = 0, j = 0;
        while(i < m && j < n){
            if(A[i] < B[j]){
                res[index++] = A[i++];
            } else{
                res[index++] = B[j++];
            }
        }
        while(i < m){
            res[index++] = A[i++];
        }
        while(j < n){
            res[index++] =B[j++];
        }
        
        if((m+n) % 2 == 0){
            return (res[(m + n) / 2] + res[(m + n) / 2 - 1]) / 2;
        } else{
            return res[(m + n) / 2];
        }
    }
}
