137. Clone Graph
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
//BFS, use queue 

public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if(node == null){
            return null;
        }
        
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        
        UndirectedGraphNode newnode = new UndirectedGraphNode(node.label);
        
        map.put(node, newnode);
        queue.offer(node);
        while(!queue.isEmpty()){
            UndirectedGraphNode top = queue.poll();
            List<UndirectedGraphNode> neighbors = top.neighbors;
            
            for(UndirectedGraphNode neighbor : neighbors){
                if(!map.containsKey(neighbor)){
                    UndirectedGraphNode newneighbor = new UndirectedGraphNode(neighbor.label);
                    map.put(neighbor, newneighbor);
                    queue.offer(neighbor);
                }
                map.get(top).neighbors.add(map.get(neighbor));
            }
        }
        return newnode;
    }
}

105. Copy List with Random Pointer
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if (head == null) {
            return head;
        }
        
        Map<RandomListNode, RandomListNode> hashmap = new HashMap<>();
        
        RandomListNode dummy = new RandomListNode(0);
        dummy.next = head;
        
        // copy nodes
        while (head != null) {
            hashmap.put(head, new RandomListNode(head.label));
            head = head.next;
        }
        
        // copy links
        head = dummy.next;
        while (head != null) {
            hashmap.get(head).next = hashmap.get(head.next);
            hashmap.get(head).random = hashmap.get(head.random);
            head = head.next;
        }
        
        return hashmap.get(dummy.next);
    }
}

127. Topological Sorting
//注意看一下如何构建图的结构， 有的面试会涉及到
/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        ArrayList<DirectedGraphNode> result = new ArrayList<DirectedGraphNode>();
        HashMap<DirectedGraphNode, Integer> map = new HashMap();
        for (DirectedGraphNode node : graph) {//统计入度
            for (DirectedGraphNode neighbor : node.neighbors) {
                if (map.containsKey(neighbor)) {
                    map.put(neighbor, map.get(neighbor) + 1);
                } else {
                    map.put(neighbor, 1); 
                }
            }
        }
        Queue<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();
        for (DirectedGraphNode node : graph) {
            if (!map.containsKey(node)) {//入度为0的最先进入
                q.offer(node);
                result.add(node);
            }
        }
        while (!q.isEmpty()) {
            DirectedGraphNode node = q.poll();
            for (DirectedGraphNode n : node.neighbors) {
                map.put(n, map.get(n) - 1);
                if (map.get(n) == 0) {
                    result.add(n);
                    q.offer(n);
                }
            }
        }
        return result;
    }
}
//DFS版本
public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        Map<DirectedGraphNode, Integer> indegree = new HashMap<>();
        for (DirectedGraphNode node : graph) {
            indegree.put(node, 0);
        }
        
        for (DirectedGraphNode node : graph) {
            for (DirectedGraphNode neighbor : node.neighbors) {
                indegree.put(neighbor, indegree.get(neighbor) + 1);
            }
        }
        
        ArrayList<DirectedGraphNode> result = new ArrayList<>();
        DirectedGraphNode root = null;
        while ((root = get0IndegreeNode(indegree)) != null) {
            result.add(root);
            dfs(result, indegree, root);
        }
        return result;
    }
    
    DirectedGraphNode get0IndegreeNode(Map<DirectedGraphNode, Integer> indegree) {
        for (Map.Entry<DirectedGraphNode, Integer> entry : indegree.entrySet()) {
            if (entry.getValue() == 0) {
                return entry.getKey();
            }
        }
        return null;
    }
    
    void dfs(List<DirectedGraphNode> result, Map<DirectedGraphNode, Integer> indegree, DirectedGraphNode root) {
        indegree.put(root, -1);//入度已经为0的val置为-1，免得下次又进入递归去
        for (DirectedGraphNode neighbor : root.neighbors) {
            indegree.put(neighbor, indegree.get(neighbor) - 1);
            if (indegree.get(neighbor) == 0) {
                result.add(neighbor);
                dfs(result, indegree, neighbor);
            }
        }
    }
}
