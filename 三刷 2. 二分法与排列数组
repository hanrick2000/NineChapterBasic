61. Search for a Range
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] res = new int[]{-1, -1};
        if (A == null || A.length == 0) {
            return res;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        //search for left bound
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] >= target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (A[start] == target) {
            res[0] = start;
        } else if (A[end] == target) {
            res[0] = end;
        } else {
            res[0] = res[1] = -1;
            return res;
        }
        
        start = 0;
        end = A.length - 1;
        //search for right bound
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] <= target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (A[end] == target) {
            res[1] = end;
        } else if (A[start]== target) {
            res[1] = start;
        } else {
            res[0] = res[1] = -1;
            return res;
        }
        return res;
    }
}


60. Search Insert Position
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (target == A[mid]) {
                return mid;
            } else if (target > A[mid]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (target <= A[start]) {
            return start;
        } else if (target > A[end]) {
            return end + 1;
        } else if (target == A[end]) {
            return end;
        } else {
            return start + 1;
        }
        //return 0;
    }
}

28. Search a 2D Matrix
public class Solution {
    /**
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        
        //search for the row 
        int start = 0;
        int end = matrix.length - 1;
        
        int row = 0;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[mid][0] == target) {
                row = mid;
            } else if (matrix[mid][0] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (matrix[start][0] <= target && target < matrix[end][0]) {
            row = start;
        } else if (target >= matrix[end][0] && target <= matrix[end][matrix[0].length - 1]) {
            row = end;
        } else {
            return false;
        }
        
        //search for the column
        start = 0;
        end = matrix[0].length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (matrix[row][start] == target || matrix[row][end] == target) {
            return true;
        }
        
        return false;
    }
}
