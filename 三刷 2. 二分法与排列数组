61. Search for a Range
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] res = new int[]{-1, -1};
        if (A == null || A.length == 0) {
            return res;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        //search for left bound
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] >= target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (A[start] == target) {
            res[0] = start;
        } else if (A[end] == target) {
            res[0] = end;
        } else {
            res[0] = res[1] = -1;
            return res;
        }
        
        start = 0;
        end = A.length - 1;
        //search for right bound
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] <= target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (A[end] == target) {
            res[1] = end;
        } else if (A[start]== target) {
            res[1] = start;
        } else {
            res[0] = res[1] = -1;
            return res;
        }
        return res;
    }
}


60. Search Insert Position
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (target == A[mid]) {
                return mid;
            } else if (target > A[mid]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (target <= A[start]) {
            return start;
        } else if (target > A[end]) {
            return end + 1;
        } else if (target == A[end]) {
            return end;
        } else {
            return start + 1;
        }
        //return 0;
    }
}

28. Search a 2D Matrix
public class Solution {
    /**
     * @param matrix: matrix, a list of lists of integers
     * @param target: An integer
     * @return: a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        
        //search for the row 
        int start = 0;
        int end = matrix.length - 1;
        
        int row = 0;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[mid][0] == target) {
                row = mid;
            } else if (matrix[mid][0] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (matrix[start][0] <= target && target < matrix[end][0]) {
            row = start;
        } else if (target >= matrix[end][0] && target <= matrix[end][matrix[0].length - 1]) {
            row = end;
        } else {
            return false;
        }
        
        //search for the column
        start = 0;
        end = matrix[0].length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (matrix[row][start] == target || matrix[row][end] == target) {
            return true;
        }
        
        return false;
    }
}


1.可以用二维数组转换成一维数组的办法，但是时间复杂度高。 2.可以用数学的办法，从左下角向右上角扫描，只能这么扫描，需要记住这种方法。
38. Search a 2D Matrix II
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        int count = 0;
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return count;
        }
        
        int n = matrix.length;
        int m = matrix[0].length;
        int i = n - 1;
        int j = 0;
        
        while (i >= 0 && j < m) {
            if (matrix[i][j] == target) {
                count++;
                i--;
                j++;
            } else if (matrix[i][j] > target) {
                i--;
            } else {
                j++;
            }
        }
        return count;
    }
}


74. First Bad Version
/**
 * public class SVNRepo {
 *     public static boolean isBadVersion(int k);
 * }
 * you can use SVNRepo.isBadVersion(k) to judge whether 
 * the kth code version is bad or not.
*/

public class Solution {
    /*
     * @param n: An integer
     * @return: An integer which is the first bad version.
     */
    public int findFirstBadVersion(int n) {
        // write your code here
        if (n == 0) {
            return 0;
        }
        
        int start = 0;
        int end = n;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (SVNRepo.isBadVersion(mid) == false) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (SVNRepo.isBadVersion(start) == true) {
            return start;
        } else {
            return end;
        }
    }
}

再写几遍吧 回回看到这道题都蒙b
75. Find Peak Element
二刷 TLE
最坏的情况递增超时，如果没有可以和mid对比的target，可以想一想怎么把mid进行操作，比如和mid的前后比较
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if (A == null || A.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = start + 1;
        while (start < A.length - 1) {
            while (end < A.length) {
                if (A[start] <= A[end]) {
                    start++;
                    end++;
                } else {
                    return start;
                }
            }
        }
        return 0;
    }
}
一刷：
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return 0;
        }
        
        int start = 1, end = A.length - 2;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(A[mid] < A[mid + 1]){
                start = mid;
            }else if(A[mid] < A[mid - 1]){
                end = mid;
            }else {
                end = mid;//mid在峰顶
            }// start = mid也行
        }
        if(A[start] < A[end]) {
            return end;
        } else { 
            return start;
        }
    }
}

159. Find Minimum in Rotated Sorted Array
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        int start = 0;
        int end = nums.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < nums[end]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (nums[start] < nums[end]) {
            return nums[start];
        } else {
            return nums[end];
        }
    }
}

160. Find Minimum in Rotated Sorted Array II
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        int start = 0;
        int end = nums.length -1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == nums[end]) {
                end--;
            } else if (nums[mid] < nums[end]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (nums[start] < nums[end]) {
            return nums[start];
        } else {
            return nums[end];
        }
    }
}

如果正常的方法不好办的时候，找一下区间，看看区间的共同点
没写出来
62. Search in Rotated Sorted Array
public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return -1;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            
            if (A[mid] < A[end]) {//后半部分排序好的
                if (A[mid] <= target && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            } else {//前半部分排序好的
                if (A[start] <= target && target <= A[mid]) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
        }
        
        if (A[start] == target) {
            return start;
        }
        
        if (A[end] == target) {
            return end;
        }
        
        return -1;
    }
}

63. Search in Rotated Sorted Array II
public class Solution {
    /**
     * @param A: an integer ratated sorted array and duplicates are allowed
     * @param target: An integer
     * @return: a boolean 
     */
    public boolean search(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0) {
            return false;
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] == A[end]) {
                end--;
            } else if (A[mid] < A[end]) {//后半部分排序好的
                if (A[mid] <= target && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            } else {//前半部分排序好的
                if (A[start] <= target && target <= A[mid]) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
        }
        
        if (A[start] == target) {
            return true;
        }
        
        if (A[end] == target) {
            return true;
        }
        
        return false;
    }
}
